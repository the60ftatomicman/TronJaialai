------- FILE tronjaialai.a LEVEL 1 PASS 2
      1  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      2  10000 ????						; Header
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE tronjaialai.a
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????						;-------------------------------------------------------
    163  0000 ????						; SKIP_SCANLINES #lines
    164  0000 ????						;
    165  0000 ????						; Skip a given # of scanlines.
    166  0000 ????						; Sets the X register to zero.
    167  0000 ????
    168  0000 ????				      MAC	skip_scanlines
    169  0000 ????			   .LINES     SET	{1}
    170  0000 ????				      ldx	#.LINES
    171  0000 ????			   .vblank    sta	WSYNC
    172  0000 ????				      dex
    173  0000 ????				      bne	.vblank
    174  0000 ????				      ENDM
    175  0000 ????
    176  0000 ????						; EOF
------- FILE tronjaialai.a
      6  0000 ????						; include "custom_macro.h" ; -- do so much work online this seems nice but necessary atm
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????			   .cycles    SET	((.lines * 76) - 13)
     11  0000 ????						; special case for when we have two timer events in a line
     12  0000 ????						; and our 2nd event straddles the WSYNC boundary
     13  0000 ????				      if	(.cycles % 64) < 12
     14  0000 ????				      lda	#(.cycles / 64) - 1
     15  0000 ????				      sta	WSYNC
     16  0000 ????				      else
     17  0000 ????				      lda	#(.cycles / 64)
     18  0000 ????				      sta	WSYNC
     19  0000 ????				      endif
     20  0000 ????				      sta	TIM64T
     21  0000 ????				      ENDM
     22  0000 ????
     23  0000 ????						;-------------------------------------------------------
     24  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     25  0000 ????						; Performs a WSYNC afterwards.
     26  0000 ????
     27  0000 ????				      MAC	timer_wait
     28  0000 ????			   .waittimer
     29  0000 ????				      lda	INTIM
     30  0000 ????				      bne	.waittimer
     31  0000 ????				      sta	WSYNC
     32  0000 ????				      ENDM
------- FILE tronjaialai.a
      8  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      9  0000 ????						; Constants
     10  0000 ????	       00 f2	   CONS_PLAYER_HEIGHT EQU	$F2	; FF-intended height
     11  0000 ????	       00 0f	   CONS_TILE_HEIGHT EQU	#15
     12  0000 ????	       00 00	   CONS_TILE_HIDE EQU	%00000000
     13  0000 ????
     14  0000 ????	       00 00	   CONS_COLOR_BLACK EQU	$00
     15  0000 ????	       00 40	   CONS_COLOR_RED EQU	$40
     16  0000 ????	       00 4a	   CONS_COLOR_PINK EQU	$4A
     17  0000 ????	       00 82	   CONS_COLOR_BLUE EQU	$82
     18  0000 ????	       00 8d	   CONS_COLOR_TEAL EQU	$8D
     19  0000 ????	       00 c6	   CONS_COLOR_GREEN EQU	$C6
     20  0000 ????	       00 ca	   CONS_COLOR_CHART EQU	$CA
     21  0000 ????
     22  0000 ????	       00 03	   CONS_FRAME_ANIMATION_COUNTER EQU	$03
     23  0000 ????
     24  0000 ????	       00 17	   CONS_BOUNDRY_P0_LEFT EQU	#23
     25  0000 ????	       00 40	   CONS_BOUNDRY_P0_RIGHT EQU	#64
     26  0000 ????	       00 62	   CONS_BOUNDRY_P1_LEFT EQU	#98
     27  0000 ????	       00 92	   CONS_BOUNDRY_P1_RIGHT EQU	#146
     28  0000 ????	       00 00	   CONS_BOUNDRY_TOP EQU	#00
     29  0000 ????	       00 1d	   CONS_BOUNDRY_BOTTOM EQU	#29
     30  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     31  0000 ????						; Macros
     32  0000 ????						; TODO add to includes
     33  0000 ????						;--------
     34  0000 ????						; FLIP_BOOL duration
     35  0000 ????						; Original author: Andy Garber
     36  0000 ????						; Takes a memory address and flips it's value than stores it
     37  0000 ????						; Assumes the Memory address value is 1 or 0
     38  0000 ????						;usage: FLIP_BOOL SomeAddress
     39  0000 ????				      MAC	flip_bool
     40  0000 ????			   .MEMADDR   SET	{1}
     41  0000 ????				      lda	.MEMADDR
     42  0000 ????				      EOR	#$01
     43  0000 ????				      sta	.MEMADDR
     44  0000 ????				      ENDM
     45  0000 ????						;--------
     46  0000 ????						; CLEAR_PLAYFIELD duration
     47  0000 ????						; Original author: Andy Garber
     48  0000 ????						; sets playfield to 0 across the board
     49  0000 ????				      MAC	clear_playfield
     50  0000 ????				      lda	#%00000000
     51  0000 ????				      sta	PF0
     52  0000 ????				      sta	PF1
     53  0000 ????				      sta	PF2
     54  0000 ????				      ENDM
     55  0000 ????
     56  0000 ????						;--------
     57  0000 ????						; FILL_PLAYFIELD duration
     58  0000 ????						; Original author: Andy Garber
     59  0000 ????						; sets playfield to 1 across the board
     60  0000 ????				      MAC	fill_playfield
     61  0000 ????				      lda	#%11111111
     62  0000 ????				      sta	PF0
     63  0000 ????				      sta	PF1
     64  0000 ????				      sta	PF2
     65  0000 ????				      ENDM
     66  0000 ????
     67  0000 ????						;--------
     68  0000 ????						; DRAW_PLAYER duration
     69  0000 ????						; Original author: Andy Garber
     70  0000 ????						; Draws a player based on the lineIdx var
     71  0000 ????				      MAC	draw_player
     72  0000 ????			   .YPOS      SET	{1}
     73  0000 ????			   .HEIGHT    SET	{2}
     74  0000 ????			   .PLAYER_REG SET	{3}
     75  0000 ????			   .PLAYER_PTR SET	{4}
     76  0000 ????			   .PLAYER_IDX SET	{5}
     77  0000 ????				      ldy	.PLAYER_IDX
     78  0000 ????				      lda	.YPOS
     79  0000 ????				      SBC	LineIdx
     80  0000 ????				      BPL	.skip
     81  0000 ????				      CMP	#.HEIGHT
     82  0000 ????				      BMI	.skip
     83  0000 ????				      lda	(.PLAYER_PTR),y
     84  0000 ????				      inc	.PLAYER_IDX
     85  0000 ????				      jmp	.end
     86  0000 ????			   .skip
     87  0000 ????				      lda	#%0000000
     88  0000 ????			   .end
     89  0000 ????				      sta	.PLAYER_REG
     90  0000 ????				      ENDM
     91  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     92  0000 ????
     93  0000 ????						; Variables segment
     94 U00a1 ????				      seg.u	Variables
     95 U0080					      org	$80
     96 U0080
     97 U0080		       00	   DrawCycle  .byte.b		;-- what cycle of our draws we are on
     98 U0081							; 1: Draw playfield
     99 U0081							; 2: Draw Players
    100 U0081		       00	   DrawPlayer .byte.b		;-- what cycle of our draws we are on
    101 U0082							; 1: Draw playfield
    102 U0082							; 2: Draw Players
    103 U0082		       00	   ReadJoystick .byte.b
    104 U0083
    105 U0083		       00	   LineIdx    .byte.b
    106 U0084
    107 U0084		       00	   loopIntI   .byte.b
    108 U0085		       00	   loopIntJ   .byte.b
    109 U0086		       00	   loopIntK   .byte.b
    110 U0087
    111 U0087		       00 00 00 00*p0_TileBooleans .DS	6
    112 U008d		       00 00 00 00*p1_TileBooleans .DS	6
    113 U0093
    114 U0093		       00	   P0XPos     .byte.b		;-- X coordinates
    115 U0094		       00	   P1XPos     .byte.b
    116 U0095
    117 U0095		       00	   P0YPos     .byte.b		;-- Y coordinate (offset from the start of the playfield)
    118 U0096		       00	   P1YPos     .byte.b
    119 U0097
    120 U0097		       00	   P0Idx      .byte.b		;-- data index of our sprite data
    121 U0098		       00	   P1Idx      .byte.b
    122 U0099
    123 U0099		       00	   P0CIdx     .byte.b		;-- color index of our sprite data
    124 U009a		       00	   P1CIdx     .byte.b
    125 U009b
    126 U009b		       00	   P0FrameIdx .byte.b		;--- animation frame
    127 U009c		       00	   P0FrameCounter .byte.b		;--- frame counter
    128 U009d
    129 U009d		       00 00	   P0Ptr      .DS	2
    130 U009f		       00 00	   P1Ptr      .DS	2
    131 U00a1							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    132 U00a1							; Code segment
    133  10000 ????				       seg	Code
    134  f000					      org	$f000
    135  f000
    136  f000				   Start
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
    138  f00b
    139  f00b		       a2 05		      ldx	#05
    140  f00d				   init_PF_Tiles
    141  f00d		       a9 82		      lda	#CONS_COLOR_BLUE
    142  f00f		       95 87		      sta	p0_TileBooleans,x
    143  f011		       95 8d		      sta	p1_TileBooleans,x
    144  f013		       ca		      dex
    145  f014		       10 f7		      bpl	init_PF_Tiles
    146  f016		       a9 01		      lda	#$01
    147  f018		       85 0a		      sta	CTRLPF
    148  f01a							;lda #CONS_COLOR_BLACK ; for debug
    149  f01a							;sta p0_TileBooleans+5
    150  f01a							;sta p1_TileBooleans+1
    151  f01a				   init_Players
    152  f01a		       a9 17		      lda	#CONS_BOUNDRY_P0_LEFT	; Max Left
    153  f01c		       85 93		      sta	P0XPos
    154  f01e		       a9 92		      lda	#CONS_BOUNDRY_P1_RIGHT	; Max right
    155  f020		       85 94		      sta	P1XPos
    156  f022		       a9 03		      lda	#CONS_BOUNDRY_TOP+3
    157  f024		       85 95		      sta	P0YPos
    158  f026		       85 96		      sta	P1YPos
    159  f028		       a9 00		      lda	#0
    160  f02a		       85 97		      sta	P0Idx
    161  f02c		       85 98		      sta	P1Idx
    162  f02e		       a9 03		      lda	#CONS_FRAME_ANIMATION_COUNTER
    163  f030		       85 9c		      sta	P0FrameCounter
    164  f032
    165  f032		       a9 43		      lda	#<P0_Frame_0	; I flipped this
    166  f034		       85 9d		      sta	P0Ptr
    167  f036		       a9 f2		      lda	#>P0_Frame_0	; I flipped this
    168  f038		       85 9e		      sta	P0Ptr+1
    169  f03a
    170  f03a		       a9 5f		      lda	#<P1_Frame_0	; I flipped this
    171  f03c		       85 9f		      sta	P1Ptr
    172  f03e		       a9 f2		      lda	#>P0_Frame_0	; I flipped this
    173  f040		       85 a0		      sta	P1Ptr+1
    174  f042							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    175  f042							; Main
    176  f042				   NextFrame
    177  f042		       4e 82 02 	      lsr	SWCHB	; test Game Reset switch
    178  f045		       90 b9		      bcc	Start	; reset?
    179  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    180  f047				   Kernal_PreScreen
    181  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0  f047					      VERTICAL_SYNC		; 1 + 3 lines of VSYNC
      1  f047		       a9 0e		      lda	#%1110
      2  f049		       85 02	   .VSLP1     sta	WSYNC
      3  f04b		       85 00		      sta	VSYNC
      4  f04d		       4a		      lsr
      5  f04e		       d0 f9		      bne	.VSLP1
      0  f050					      TIMER_SETUP	37	; 37 lines of underscan
      1  f050				   .lines     SET	37
      2  f050				   .cycles    SET	((.lines * 76) - 13)
      3  f050
      4  f050
      5  f050				  -	      if	(.cycles % 64) < 12
      6  f050				  -	      lda	#(.cycles / 64) - 1
      7  f050				  -	      sta	WSYNC
      8  f050					      else
      9  f050		       a9 2b		      lda	#(.cycles / 64)
     10  f052		       85 02		      sta	WSYNC
     11  f054					      endif
     12  f054		       8d 96 02 	      sta	TIM64T
    184  f057
    185  f057							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    186  f057				   Kernal_Screen
    187  f057							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      
      0  f057					      CLEAR_PLAYFIELD
      1  f057		       a9 00		      lda	#%00000000
      2  f059		       85 0d		      sta	PF0
      3  f05b		       85 0e		      sta	PF1
      4  f05d		       85 0f		      sta	PF2
    189  f05f		       a9 4a		      lda	#CONS_COLOR_PINK
    190  f061		       85 06		      sta	COLUP0
    191  f063		       a9 ca		      lda	#CONS_COLOR_CHART
    192  f065		       85 07		      sta	COLUP1
    193  f067		       a9 00		      lda	#CONS_COLOR_BLACK
    194  f069		       85 09		      sta	COLUBK
    195  f06b		       a9 ff		      lda	#255
    196  f06d		       85 83		      sta	LineIdx
    197  f06f
    198  f06f
    199  f06f
    200  f06f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    201  f06f							;		 Main (192 lines)
    202  f06f							; What is a Kernal?
    203  f06f							; These are groupings of line sections.
    204  f06f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    205  f06f				   Kernal_Movement
    206  f06f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    207  f06f							; This is where we do player X logic
    208  f06f							; Set Player 1 x position
    209  f06f		       a5 93		      lda	P0XPos	; get X coordinate
    210  f071		       a2 00		      ldx	#0	; player 0
    211  f073		       20 a4 f1 	      jsr	SetHorizPos	; set coarse offset
    212  f076
    213  f076		       a5 94		      lda	P1XPos	; get X coordinate
    214  f078		       a2 01		      ldx	#1	; player 1
    215  f07a		       20 a4 f1 	      jsr	SetHorizPos	; set coarse offset
    216  f07d
    217  f07d		       85 02		      sta	WSYNC	; sync w/ scanline
    218  f07f		       85 2a		      sta	HMOVE	; apply fine offsets
    219  f081
    220  f081		       a9 00		      lda	#0
    221  f083		       85 97		      sta	P0Idx
    222  f085		       85 98		      sta	P1Idx
      0  f087					      TIMER_WAIT
      1  f087				   .waittimer
      2  f087		       ad 84 02 	      lda	INTIM
      3  f08a		       d0 fb		      bne	.waittimer
      4  f08c		       85 02		      sta	WSYNC
    224  f08e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
    225  f08e		       85 02		      sta	WSYNC
    226  f090				   Kernal_Tower
    227  f090							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    228  f090							; Background art for the upper half of the game.
    229  f090							; PF is set to Mirror and we just draw. than wait
    230  f090							; The BLACK we see is really the PF mirroed.
    231  f090							; Color of the towers is controlled by the background.
    232  f090							; TODO make this less gross.
    233  f090		       a9 00		      lda	#CONS_COLOR_BLACK	; Make this a define
    234  f092		       85 08		      sta	COLUPF
    235  f094							; These are ALWAYS the same
    236  f094		       a9 f0		      lda	#%11110000
    237  f096		       85 0d		      sta	PF0
    238  f098		       a9 7f		      lda	#%01111111
    239  f09a		       85 0f		      sta	PF2
    240  f09c
    241  f09c		       a2 00		      ldx	#$0
    242  f09e		       a0 48		      ldy	#$48
    243  f0a0		       85 02		      sta	WSYNC
    244  f0a2				   Kernal_Tower_Draw
    245  f0a2		       85 02		      sta	WSYNC
    246  f0a4		       98		      tya
    247  f0a5		       c9 40		      cmp	#$40
    248  f0a7		       30 08		      bmi	Kernal_Tower_WaitASecond
    249  f0a9		       bd 1f f2 	      lda	PF_Kernal_Tower,x+1
    250  f0ac		       85 0e		      sta	PF1
    251  f0ae		       4c b5 f0 	      jmp	Kernal_Tower_Draw_Colorize
    252  f0b1				   Kernal_Tower_WaitASecond
    253  f0b1		       a9 f7		      lda	#%11110111
    254  f0b3		       85 0e		      sta	PF1
    255  f0b5				   Kernal_Tower_Draw_Colorize
    256  f0b5		       a9 40		      lda	#CONS_COLOR_RED
    257  f0b7		       85 09		      sta	COLUBK
      0  f0b9					      SLEEP	16	;; as we add more code for playfield, edit this.
      1  f0b9				   .CYCLES    SET	16
      2  f0b9
      3  f0b9				  -	      IF	.CYCLES < 2
      4  f0b9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b9				  -	      ERR
      6  f0b9					      ENDIF
      7  f0b9
      8  f0b9				  -	      IF	.CYCLES & 1
      9  f0b9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b9				  -	      nop	0
     11  f0b9				  -	      ELSE
     12  f0b9				  -	      bit	VSYNC
     13  f0b9				  -	      ENDIF
     14  f0b9				  -.CYCLES    SET	.CYCLES - 3
     15  f0b9					      ENDIF
     16  f0b9
     17  f0b9					      REPEAT	.CYCLES / 2
     18  f0b9		       ea		      nop
     17  f0b9					      REPEND
     18  f0ba		       ea		      nop
     17  f0ba					      REPEND
     18  f0bb		       ea		      nop
     17  f0bb					      REPEND
     18  f0bc		       ea		      nop
     17  f0bc					      REPEND
     18  f0bd		       ea		      nop
     17  f0bd					      REPEND
     18  f0be		       ea		      nop
     17  f0be					      REPEND
     18  f0bf		       ea		      nop
     17  f0bf					      REPEND
     18  f0c0		       ea		      nop
     19  f0c1					      REPEND
    259  f0c1		       a9 8d		      lda	#CONS_COLOR_TEAL
    260  f0c3		       85 09		      sta	COLUBK
      0  f0c5					      SLEEP	8
      1  f0c5				   .CYCLES    SET	8
      2  f0c5
      3  f0c5				  -	      IF	.CYCLES < 2
      4  f0c5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0c5				  -	      ERR
      6  f0c5					      ENDIF
      7  f0c5
      8  f0c5				  -	      IF	.CYCLES & 1
      9  f0c5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0c5				  -	      nop	0
     11  f0c5				  -	      ELSE
     12  f0c5				  -	      bit	VSYNC
     13  f0c5				  -	      ENDIF
     14  f0c5				  -.CYCLES    SET	.CYCLES - 3
     15  f0c5					      ENDIF
     16  f0c5
     17  f0c5					      REPEAT	.CYCLES / 2
     18  f0c5		       ea		      nop
     17  f0c5					      REPEND
     18  f0c6		       ea		      nop
     17  f0c6					      REPEND
     18  f0c7		       ea		      nop
     17  f0c7					      REPEND
     18  f0c8		       ea		      nop
     19  f0c9					      REPEND
    262  f0c9		       a9 c6		      lda	#CONS_COLOR_GREEN
    263  f0cb		       85 09		      sta	COLUBK
    264  f0cd		       e8		      inx
    265  f0ce		       e8		      inx
    266  f0cf		       e8		      inx
    267  f0d0		       88		      dey
    268  f0d1		       d0 cf		      bne	Kernal_Tower_Draw
    269  f0d3				   Kernal_Tower_End
    270  f0d3							;TIMER_SETUP 48
    271  f0d3							;TIMER_WAIT
    272  f0d3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    273  f0d3		       a9 00		      lda	#CONS_COLOR_BLACK
    274  f0d5		       85 09		      sta	COLUBK
      0  f0d7					      CLEAR_PLAYFIELD
      1  f0d7		       a9 00		      lda	#%00000000
      2  f0d9		       85 0d		      sta	PF0
      3  f0db		       85 0e		      sta	PF1
      4  f0dd		       85 0f		      sta	PF2
    276  f0df		       a9 82		      lda	#CONS_COLOR_BLUE	; Make this a define
    277  f0e1		       85 08		      sta	COLUPF
    278  f0e3		       a2 02		      ldx	#2	; this will always do +1 what you want
    279  f0e5		       86 84		      stx	loopIntI
    280  f0e7		       a9 f0		      lda	#%11110000
    281  f0e9				   Kernal_Stairs
    282  f0e9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    283  f0e9							; This draws a nice staircase from our tower
    284  f0e9							; More background mumbo jumbo
    285  f0e9							; TODO -- allow drawing of player here
    286  f0e9		       a2 03		      ldx	#3	; this will always do +1 what you want
    287  f0eb		       86 85		      stx	loopIntJ
    288  f0ed				   Kernal_Stairs_J
    289  f0ed		       85 02		      sta	WSYNC
    290  f0ef		       85 0f		      sta	PF2
    291  f0f1		       c6 85		      DEC	loopIntJ
    292  f0f3		       10 f8		      BPL	Kernal_Stairs_J
    293  f0f5		       4a		      LSR
    294  f0f6		       4a		      LSR
    295  f0f7		       c6 84		      DEC	loopIntI
    296  f0f9		       10 ee		      BPL	Kernal_Stairs
    297  f0fb		       85 02		      sta	WSYNC
    298  f0fd
    299  f0fd							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    300  f0fd				   Kernal_Gap
    301  f0fd							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    302  f0fd							; This is just a spacing between the tiles
    303  f0fd							; we setup the presets for the complex stuff below!
    304  f0fd							; Maybe just make this part of the loop below? make my tile horizontal breaks 2 cycles each?
    305  f0fd
      0  f0fd					      CLEAR_PLAYFIELD
      1  f0fd		       a9 00		      lda	#%00000000
      2  f0ff		       85 0d		      sta	PF0
      3  f101		       85 0e		      sta	PF1
      4  f103		       85 0f		      sta	PF2
    307  f105		       85 02		      sta	WSYNC
    308  f107		       a9 00		      lda	#CONS_COLOR_BLACK	; May NEVER need to do this, there may be an inverse for the stairs above.
    309  f109		       85 08		      sta	COLUPF
    310  f10b
    311  f10b
    312  f10b		       a9 70		      lda	#%01110000
    313  f10d		       85 0d		      sta	PF0
    314  f10f		       a9 04		      lda	#%000000100
    315  f111		       85 0e		      sta	PF1
    316  f113		       a9 f0		      lda	#%11110000
    317  f115		       85 0f		      sta	PF2
    318  f117
    319  f117		       a9 00		      lda	#0
    320  f119		       85 83		      sta	LineIdx
    321  f11b		       a9 03		      lda	#3	; this will always do +1 what you want
    322  f11d		       85 84		      sta	loopIntI
    323  f11f		       a2 00		      ldx	#0	; uused to change address levels
    324  f121
    325  f121		       85 02		      sta	WSYNC
    326  f123							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    327  f123				   Kernal_CombatField
    328  f123							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    329  f123		       a5 0f		      lda	CONS_TILE_HEIGHT
    330  f125		       85 85		      sta	loopIntJ
    331  f127				   Kernal_CombatField_startOfDraw
    332  f127		       85 02		      sta	WSYNC
    333  f129
    334  f129				   Kernal_CombatField_DrawPlayfied
    335  f129
    336  f129		       b5 87		      lda	p0_TileBooleans,x
    337  f12b		       85 09		      sta	COLUBK
    338  f12d
      0  f12d					      SLEEP	21
      1  f12d				   .CYCLES    SET	21
      2  f12d
      3  f12d				  -	      IF	.CYCLES < 2
      4  f12d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f12d				  -	      ERR
      6  f12d					      ENDIF
      7  f12d
      8  f12d					      IF	.CYCLES & 1
      9  f12d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f12d		       04 00		      nop	0
     11  f12f				  -	      ELSE
     12  f12f				  -	      bit	VSYNC
     13  f12f					      ENDIF
     14  f12f				   .CYCLES    SET	.CYCLES - 3
     15  f12f					      ENDIF
     16  f12f
     17  f12f					      REPEAT	.CYCLES / 2
     18  f12f		       ea		      nop
     17  f12f					      REPEND
     18  f130		       ea		      nop
     17  f130					      REPEND
     18  f131		       ea		      nop
     17  f131					      REPEND
     18  f132		       ea		      nop
     17  f132					      REPEND
     18  f133		       ea		      nop
     17  f133					      REPEND
     18  f134		       ea		      nop
     17  f134					      REPEND
     18  f135		       ea		      nop
     17  f135					      REPEND
     18  f136		       ea		      nop
     17  f136					      REPEND
     18  f137		       ea		      nop
     19  f138					      REPEND
    340  f138
    341  f138		       b5 88		      lda	p0_TileBooleans,x+1
    342  f13a		       85 09		      sta	COLUBK
    343  f13c
      0  f13c					      SLEEP	5	; minimal. mid is red atm.
      1  f13c				   .CYCLES    SET	5
      2  f13c
      3  f13c				  -	      IF	.CYCLES < 2
      4  f13c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f13c				  -	      ERR
      6  f13c					      ENDIF
      7  f13c
      8  f13c					      IF	.CYCLES & 1
      9  f13c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f13c		       04 00		      nop	0
     11  f13e				  -	      ELSE
     12  f13e				  -	      bit	VSYNC
     13  f13e					      ENDIF
     14  f13e				   .CYCLES    SET	.CYCLES - 3
     15  f13e					      ENDIF
     16  f13e
     17  f13e					      REPEAT	.CYCLES / 2
     18  f13e		       ea		      nop
     19  f13f					      REPEND
    345  f13f
    346  f13f
    347  f13f		       b5 8d		      lda	p1_TileBooleans,x
    348  f141		       85 09		      sta	COLUBK
    349  f143
      0  f143					      SLEEP	10
      1  f143				   .CYCLES    SET	10
      2  f143
      3  f143				  -	      IF	.CYCLES < 2
      4  f143				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f143				  -	      ERR
      6  f143					      ENDIF
      7  f143
      8  f143				  -	      IF	.CYCLES & 1
      9  f143				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f143				  -	      nop	0
     11  f143				  -	      ELSE
     12  f143				  -	      bit	VSYNC
     13  f143				  -	      ENDIF
     14  f143				  -.CYCLES    SET	.CYCLES - 3
     15  f143					      ENDIF
     16  f143
     17  f143					      REPEAT	.CYCLES / 2
     18  f143		       ea		      nop
     17  f143					      REPEND
     18  f144		       ea		      nop
     17  f144					      REPEND
     18  f145		       ea		      nop
     17  f145					      REPEND
     18  f146		       ea		      nop
     17  f146					      REPEND
     18  f147		       ea		      nop
     19  f148					      REPEND
    351  f148
    352  f148
    353  f148		       b5 8e		      lda	p1_TileBooleans,x+1
    354  f14a		       85 09		      sta	COLUBK
    355  f14c
      0  f14c					      SLEEP	4
      1  f14c				   .CYCLES    SET	4
      2  f14c
      3  f14c				  -	      IF	.CYCLES < 2
      4  f14c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f14c				  -	      ERR
      6  f14c					      ENDIF
      7  f14c
      8  f14c				  -	      IF	.CYCLES & 1
      9  f14c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f14c				  -	      nop	0
     11  f14c				  -	      ELSE
     12  f14c				  -	      bit	VSYNC
     13  f14c				  -	      ENDIF
     14  f14c				  -.CYCLES    SET	.CYCLES - 3
     15  f14c					      ENDIF
     16  f14c
     17  f14c					      REPEAT	.CYCLES / 2
     18  f14c		       ea		      nop
     17  f14c					      REPEND
     18  f14d		       ea		      nop
     19  f14e					      REPEND
    357  f14e
    358  f14e		       a9 00		      lda	#CONS_COLOR_BLACK
    359  f150		       85 09		      sta	COLUBK
    360  f152
    361  f152				   Kernal_CombatField_DrawPlayers
    362  f152
      0  f152					      DRAW_PLAYER	P0YPos, CONS_PLAYER_HEIGHT, GRP0, P0Ptr,P0Idx
      1  f152				   .YPOS      SET	P0YPos
      2  f152				   .HEIGHT    SET	CONS_PLAYER_HEIGHT
      3  f152				   .PLAYER_REG SET	GRP0
      4  f152				   .PLAYER_PTR SET	P0Ptr
      5  f152				   .PLAYER_IDX SET	P0Idx
      6  f152		       a4 97		      ldy	.PLAYER_IDX
      7  f154		       a5 95		      lda	.YPOS
      8  f156		       e5 83		      SBC	LineIdx
      9  f158		       10 0b		      BPL	.skip
     10  f15a		       c9 f2		      CMP	#.HEIGHT
     11  f15c		       30 07		      BMI	.skip
     12  f15e		       b1 9d		      lda	(.PLAYER_PTR),y
     13  f160		       e6 97		      inc	.PLAYER_IDX
     14  f162		       4c 67 f1 	      jmp	.end
     15  f165				   .skip
     16  f165		       a9 00		      lda	#%0000000
     17  f167				   .end
     18  f167		       85 1b		      sta	.PLAYER_REG
      0  f169					      DRAW_PLAYER	P1YPos, CONS_PLAYER_HEIGHT, GRP1, P1Ptr,P1Idx
      1  f169				   .YPOS      SET	P1YPos
      2  f169				   .HEIGHT    SET	CONS_PLAYER_HEIGHT
      3  f169				   .PLAYER_REG SET	GRP1
      4  f169				   .PLAYER_PTR SET	P1Ptr
      5  f169				   .PLAYER_IDX SET	P1Idx
      6  f169		       a4 98		      ldy	.PLAYER_IDX
      7  f16b		       a5 96		      lda	.YPOS
      8  f16d		       e5 83		      SBC	LineIdx
      9  f16f		       10 0b		      BPL	.skip
     10  f171		       c9 f2		      CMP	#.HEIGHT
     11  f173		       30 07		      BMI	.skip
     12  f175		       b1 9f		      lda	(.PLAYER_PTR),y
     13  f177		       e6 98		      inc	.PLAYER_IDX
     14  f179		       4c 7e f1 	      jmp	.end
     15  f17c				   .skip
     16  f17c		       a9 00		      lda	#%0000000
     17  f17e				   .end
     18  f17e		       85 1c		      sta	.PLAYER_REG
    365  f180
    366  f180				   Kernal_CombatField_EndOfDraw
    367  f180		       e6 83		      inc	LineIdx
    368  f182		       c6 85		      dec	loopIntJ
    369  f184		       d0 a1		      bne	Kernal_CombatField_startOfDraw
    370  f186
    371  f186		       85 02		      sta	WSYNC
    372  f188		       e8		      inx
    373  f189		       e8		      inx
    374  f18a		       c6 84		      dec	loopIntI
    375  f18c		       d0 95		      bne	Kernal_CombatField
    376  f18e
    377  f18e		       20 b6 f1 	      jsr	MoveJoystick
    378  f191		       ea		      nop		;DEBUG! til i fill this out
    379  f192							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    380  f192							; 29 lines of overscan
    381  f192				   Overscan
    382  f192							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0  f192					      TIMER_SETUP	29
      1  f192				   .lines     SET	29
      2  f192				   .cycles    SET	((.lines * 76) - 13)
      3  f192
      4  f192
      5  f192				  -	      if	(.cycles % 64) < 12
      6  f192				  -	      lda	#(.cycles / 64) - 1
      7  f192				  -	      sta	WSYNC
      8  f192					      else
      9  f192		       a9 22		      lda	#(.cycles / 64)
     10  f194		       85 02		      sta	WSYNC
     11  f196					      endif
     12  f196		       8d 96 02 	      sta	TIM64T
      0  f199					      TIMER_WAIT
      1  f199				   .waittimer
      2  f199		       ad 84 02 	      lda	INTIM
      3  f19c		       d0 fb		      bne	.waittimer
      4  f19e		       85 02		      sta	WSYNC
    385  f1a0		       ea		      nop		; for debugging!
    386  f1a1							; total = 262 lines, go to next frame
    387  f1a1		       4c 42 f0 	      jmp	NextFrame
    388  f1a4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    389  f1a4							; Subroutines
    390  f1a4							;;;;;;;;;;;;;;;;;;;;;
    391  f1a4							; SetHorizPos routine
    392  f1a4							; A = X coordinate
    393  f1a4							; X = player number (0 or 1)
    394  f1a4				   SetHorizPos
    395  f1a4		       85 02		      sta	WSYNC	; start a new line
    396  f1a6		       38		      sec		; set carry flag
    397  f1a7				   DivideLoop
    398  f1a7		       e9 0f		      sbc	#15	; subtract 15
    399  f1a9		       b0 fc		      bcs	DivideLoop	; branch until negative
    400  f1ab		       49 07		      eor	#7	; calculate fine offset
    401  f1ad		       0a		      asl
    402  f1ae		       0a		      asl
    403  f1af		       0a		      asl
    404  f1b0		       0a		      asl
    405  f1b1		       95 10		      sta	RESP0,x	; fix coarse position
    406  f1b3		       95 20		      sta	HMP0,x	; set fine offset
    407  f1b5		       60		      rts		; return to caller
    408  f1b6							;;;;;;;;;;;;;;;;;;;;;
    409  f1b6							; TODO -- cannot handle double motion!
    410  f1b6				   MoveJoystick
    411  f1b6		       a6 95		      ldx	P0YPos
    412  f1b8		       a9 20		      lda	#%00100000	;Down?
    413  f1ba		       2c 80 02 	      bit	SWCHA
    414  f1bd		       d0 07		      bne	SkipMoveDown
    415  f1bf		       e0 1d		      cpx	#CONS_BOUNDRY_BOTTOM
    416  f1c1		       b0 03		      bcs	SkipMoveDown
    417  f1c3		       e8		      inx
    418  f1c4		       c6 9c		      dec	P0FrameCounter
    419  f1c6				   SkipMoveDown
    420  f1c6		       a9 10		      lda	#%00010000	;Up
    421  f1c8		       2c 80 02 	      bit	SWCHA
    422  f1cb		       d0 07		      bne	SkipMoveUp
    423  f1cd		       e0 00		      cpx	#CONS_BOUNDRY_TOP
    424  f1cf		       f0 03		      beq	SkipMoveUp
    425  f1d1		       ca		      dex
    426  f1d2		       c6 9c		      dec	P0FrameCounter
    427  f1d4				   SkipMoveUp
    428  f1d4		       86 95		      stx	P0YPos
    429  f1d6							; Move horizontally
    430  f1d6		       a6 93		      ldx	P0XPos
    431  f1d8		       a9 40		      lda	#%01000000	;Left?
    432  f1da		       2c 80 02 	      bit	SWCHA
    433  f1dd		       d0 07		      bne	SkipMoveLeft
    434  f1df		       e0 17		      cpx	#CONS_BOUNDRY_P0_LEFT
    435  f1e1		       90 03		      bcc	SkipMoveLeft
    436  f1e3		       ca		      dex
    437  f1e4		       c6 9c		      dec	P0FrameCounter
    438  f1e6				   SkipMoveLeft
    439  f1e6		       a9 80		      lda	#%10000000	;Right?
    440  f1e8		       2c 80 02 	      bit	SWCHA
    441  f1eb		       d0 07		      bne	SkipMoveRight
    442  f1ed		       e0 40		      cpx	#CONS_BOUNDRY_P0_RIGHT
    443  f1ef		       b0 03		      bcs	SkipMoveRight
    444  f1f1		       e8		      inx
    445  f1f2		       c6 9c		      dec	P0FrameCounter
    446  f1f4				   SkipMoveRight
    447  f1f4		       86 93		      stx	P0XPos
    448  f1f6		       a5 9c		      lda	P0FrameCounter
    449  f1f8		       c9 00		      cmp	#0
    450  f1fa		       10 21		      bpl	joystickEnd
    451  f1fc							;TODO -- can probaby handle this faster!
      0  f1fc					      FLIP_BOOL	P0FrameIdx
      1  f1fc				   .MEMADDR   SET	P0FrameIdx
      2  f1fc		       a5 9b		      lda	.MEMADDR
      3  f1fe		       49 01		      EOR	#$01
      4  f200		       85 9b		      sta	.MEMADDR
    453  f202		       c9 01		      cmp	#$01
    454  f204		       f0 0b		      beq	DrawFrameB
    455  f206				   DrawFrameA
    456  f206		       a9 43		      lda	#<P0_Frame_0
    457  f208		       85 9d		      sta	P0Ptr
    458  f20a		       a9 f2		      lda	#>P0_Frame_0
    459  f20c		       85 9e		      sta	P0Ptr+1
    460  f20e		       4c 19 f2 	      jmp	ResetFrameTimer
    461  f211				   DrawFrameB
    462  f211		       a9 51		      lda	#<P0_Frame_1
    463  f213		       85 9d		      sta	P0Ptr
    464  f215		       a9 f2		      lda	#>P0_Frame_1
    465  f217		       85 9e		      sta	P0Ptr+1
    466  f219				   ResetFrameTimer
    467  f219		       a9 03		      lda	#CONS_FRAME_ANIMATION_COUNTER
    468  f21b		       85 9c		      sta	P0FrameCounter
    469  f21d				   joystickEnd
    470  f21d		       60		      rts
    471  f21e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    472  f21e							; Data
    473  f21e							;;;;;;;;;;;;;;;;;;;;;
    474  f21e				   PF_Kernal_Tower
    475  f21e		       f0		      .byte.b	#%11110000
    476  f21f		       f7		      .byte.b	#%11110111
    477  f220		       7f		      .byte.b	#%01111111
    478  f221
    479  f221		       f0		      .byte.b	#%11110000
    480  f222		       f7		      .byte.b	#%11110111
    481  f223		       7f		      .byte.b	#%01111111
    482  f224
    483  f224		       f0		      .byte.b	#%11110000
    484  f225		       f7		      .byte.b	#%11110111
    485  f226		       7f		      .byte.b	#%01111111
    486  f227							;----------------------------
    487  f227		       f0		      .byte.b	#%11110000
    488  f228		       e3		      .byte.b	#%11100011
    489  f229		       7f		      .byte.b	#%01111111
    490  f22a
    491  f22a		       f0		      .byte.b	#%11110000
    492  f22b		       e3		      .byte.b	#%11100011
    493  f22c		       7f		      .byte.b	#%01111111
    494  f22d
    495  f22d		       f0		      .byte.b	#%11110000
    496  f22e		       e3		      .byte.b	#%11100011
    497  f22f		       7f		      .byte.b	#%01111111
    498  f230							;----------------------------
    499  f230		       f0		      .byte.b	#%11110000
    500  f231		       c1		      .byte.b	#%11000001
    501  f232		       7f		      .byte.b	#%01111111
    502  f233
    503  f233		       f0		      .byte.b	#%11110000
    504  f234		       c1		      .byte.b	#%11000001
    505  f235		       7f		      .byte.b	#%01111111
    506  f236
    507  f236		       f0		      .byte.b	#%11110000
    508  f237		       c1		      .byte.b	#%11000001
    509  f238		       7f		      .byte.b	#%01111111
    510  f239							;----------------------------
    511  f239		       f0		      .byte.b	#%11110000
    512  f23a		       80		      .byte.b	#%10000000
    513  f23b		       7f		      .byte.b	#%01111111
    514  f23c
    515  f23c		       f0		      .byte.b	#%11110000
    516  f23d		       80		      .byte.b	#%10000000
    517  f23e		       7f		      .byte.b	#%01111111
    518  f23f
    519  f23f		       f0		      .byte.b	#%11110000
    520  f240		       80		      .byte.b	#%10000000
    521  f241		       7f		      .byte.b	#%01111111
    522  f242							;----------------------------
    523  f242		       00		      .byte.b	#0
    524  f243				   P0_Frame_0
    525  f243							; draw from top to bottom
    526  f243		       7c		      .byte.b	#%01111100
    527  f244		       7e		      .byte.b	#%01111110
    528  f245		       68		      .byte.b	#%01101000
    529  f246		       7c		      .byte.b	#%01111100
    530  f247		       3c		      .byte.b	#%00111100
    531  f248		       00		      .byte.b	#%00000000
    532  f249		       78		      .byte.b	#%01111000
    533  f24a		       bd		      .byte.b	#%10111101
    534  f24b		       be		      .byte.b	#%10111110
    535  f24c		       5c		      .byte.b	#%01011100
    536  f24d		       78		      .byte.b	#%01111000
    537  f24e		       00		      .byte.b	#%00000000
    538  f24f		       76		      .byte.b	#%01110110
    539  f250		       00		      .byte.b	#0
    540  f251				   P0_Frame_1
    541  f251							; draw from top to bottom
    542  f251		       7c		      .byte.b	#%01111100
    543  f252		       7e		      .byte.b	#%01111110
    544  f253		       68		      .byte.b	#%01101000
    545  f254		       7c		      .byte.b	#%01111100
    546  f255		       3c		      .byte.b	#%00111100
    547  f256		       00		      .byte.b	#%00000000
    548  f257		       78		      .byte.b	#%01111000
    549  f258		       bd		      .byte.b	#%10111101
    550  f259		       be		      .byte.b	#%10111110
    551  f25a		       5c		      .byte.b	#%01011100
    552  f25b		       78		      .byte.b	#%01111000
    553  f25c		       00		      .byte.b	#%00000000
    554  f25d		       3c		      .byte.b	#%00111100
    555  f25e		       00		      .byte.b	#0
    556  f25f				   P1_Frame_0
    557  f25f							; draw from top to bottom
    558  f25f		       3e		      .byte.b	#%00111110	; 0x3E
    559  f260		       7e		      .byte.b	#%01111110	; 0x7E
    560  f261		       16		      .byte.b	#%00010110	; 0x16
    561  f262		       3e		      .byte.b	#%00111110	; 0x3E
    562  f263		       3c		      .byte.b	#%00111100	; 0x3C
    563  f264		       00		      .byte.b	#%00000000	; 0x00
    564  f265		       1e		      .byte.b	#%00011110	; 0x1E
    565  f266		       bd		      .byte.b	#%10111101	; 0xBD
    566  f267		       7d		      .byte.b	#%01111101	; 0x7D
    567  f268		       3a		      .byte.b	#%00111010	; 0x3A
    568  f269		       1e		      .byte.b	#%00011110	; 0x1E
    569  f26a		       00		      .byte.b	#%00000000	; 0x00
    570  f26b		       6e		      .byte.b	#%01101110	; 0x6E
    571  f26c		       00		      .byte.b	#0
    572  f26d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    573  f26d							; Epilogue
    574  f26d							;;;;;;;;;;;;;;;;;;;;;
    575  fffc					      org	$fffc
    576  fffc		       00 f0		      .word.w	Start	; reset vector
    577  fffe		       00 f0		      .word.w	Start	; BRK vector
