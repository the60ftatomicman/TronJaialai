------- FILE tronjaialai.a LEVEL 1 PASS 2
      1  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      2  10000 ????						; Header
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE tronjaialai.a
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????						;-------------------------------------------------------
    163  0000 ????						; SKIP_SCANLINES #lines
    164  0000 ????						;
    165  0000 ????						; Skip a given # of scanlines.
    166  0000 ????						; Sets the X register to zero.
    167  0000 ????
    168  0000 ????				      MAC	skip_scanlines
    169  0000 ????			   .LINES     SET	{1}
    170  0000 ????				      ldx	#.LINES
    171  0000 ????			   .vblank    sta	WSYNC
    172  0000 ????				      dex
    173  0000 ????				      bne	.vblank
    174  0000 ????				      ENDM
    175  0000 ????
    176  0000 ????						; EOF
------- FILE tronjaialai.a
      6  0000 ????						; include "custom_macro.h" ; -- do so much work online this seems nice but necessary atm
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????			   .cycles    SET	((.lines * 76) - 13)
     11  0000 ????						; special case for when we have two timer events in a line
     12  0000 ????						; and our 2nd event straddles the WSYNC boundary
     13  0000 ????				      if	(.cycles % 64) < 12
     14  0000 ????				      lda	#(.cycles / 64) - 1
     15  0000 ????				      sta	WSYNC
     16  0000 ????				      else
     17  0000 ????				      lda	#(.cycles / 64)
     18  0000 ????				      sta	WSYNC
     19  0000 ????				      endif
     20  0000 ????				      sta	TIM64T
     21  0000 ????				      ENDM
     22  0000 ????
     23  0000 ????						;-------------------------------------------------------
     24  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     25  0000 ????						; Performs a WSYNC afterwards.
     26  0000 ????
     27  0000 ????				      MAC	timer_wait
     28  0000 ????			   .waittimer
     29  0000 ????				      lda	INTIM
     30  0000 ????				      bne	.waittimer
     31  0000 ????				      sta	WSYNC
     32  0000 ????				      ENDM
------- FILE tronjaialai.a
      8  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      9  0000 ????						; Constants
     10  0000 ????	       00 0d	   CONS_PLAYER_HEIGHT EQU	$0D	; FF-intended height
     11  0000 ????	       00 0f	   CONS_TILE_HEIGHT EQU	#15
     12  0000 ????	       00 00	   CONS_TILE_HIDE EQU	%00000000
     13  0000 ????
     14  0000 ????	       00 00	   CONS_COLOR_BLACK EQU	$00
     15  0000 ????	       00 40	   CONS_COLOR_RED EQU	$40
     16  0000 ????	       00 4a	   CONS_COLOR_PINK EQU	$4A
     17  0000 ????	       00 82	   CONS_COLOR_BLUE EQU	$82
     18  0000 ????	       00 8d	   CONS_COLOR_TEAL EQU	$8D
     19  0000 ????	       00 c6	   CONS_COLOR_GREEN EQU	$C6
     20  0000 ????	       00 ca	   CONS_COLOR_CHART EQU	$CA
     21  0000 ????
     22  0000 ????	       00 03	   CONS_FRAME_ANIMATION_COUNTER EQU	$03
     23  0000 ????
     24  0000 ????	       00 80	   CONS_P0_STARTING_JOYSTICK_BYTE EQU	%10000000
     25  0000 ????	       00 08	   CONS_P1_STARTING_JOYSTICK_BYTE EQU	%00001000
     26  0000 ????	       00 17	   CONS_BOUNDRY_P0_LEFT EQU	#23
     27  0000 ????	       00 40	   CONS_BOUNDRY_P0_RIGHT EQU	#64
     28  0000 ????	       00 6c	   CONS_BOUNDRY_P1_LEFT EQU	#108
     29  0000 ????	       00 94	   CONS_BOUNDRY_P1_RIGHT EQU	#148
     30  0000 ????	       00 00	   CONS_BOUNDRY_TOP EQU	#00
     31  0000 ????	       00 1d	   CONS_BOUNDRY_BOTTOM EQU	#29
     32  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     33  0000 ????						; Macros
     34  0000 ????						; TODO add to includes
     35  0000 ????						;--------
     36  0000 ????						; FLIP_BOOL duration
     37  0000 ????						; Original author: Andy Garber
     38  0000 ????						; Takes a memory address and flips it's value than stores it
     39  0000 ????						; Assumes the Memory address value is 1 or 0
     40  0000 ????						;usage: FLIP_BOOL SomeAddress
     41  0000 ????				      MAC	flip_bool
     42  0000 ????			   .MEMADDR   SET	{1}
     43  0000 ????				      lda	.MEMADDR
     44  0000 ????				      EOR	#$01
     45  0000 ????				      sta	.MEMADDR
     46  0000 ????				      ENDM
     47  0000 ????						;--------
     48  0000 ????						; CLEAR_PLAYFIELD duration
     49  0000 ????						; Original author: Andy Garber
     50  0000 ????						; sets playfield to 0 across the board
     51  0000 ????				      MAC	clear_playfield
     52  0000 ????				      lda	#%00000000
     53  0000 ????				      sta	PF0
     54  0000 ????				      sta	PF1
     55  0000 ????				      sta	PF2
     56  0000 ????				      ENDM
     57  0000 ????
     58  0000 ????						;--------
     59  0000 ????						; FILL_PLAYFIELD duration
     60  0000 ????						; Original author: Andy Garber
     61  0000 ????						; sets playfield to 1 across the board
     62  0000 ????				      MAC	fill_playfield
     63  0000 ????				      lda	#%11111111
     64  0000 ????				      sta	PF0
     65  0000 ????				      sta	PF1
     66  0000 ????				      sta	PF2
     67  0000 ????				      ENDM
     68  0000 ????						;--------
     69  0000 ????						; DRAW_MISSLE 
     70  0000 ????						; Original author: Andy Garber
     71  0000 ????						; Draws a missle based on a byte containing it's Y axis.
     72  0000 ????				      MAC	draw_missle
     73  0000 ????			   .YPOS      SET	{1}
     74  0000 ????			   .MISSLE_REG SET	{2}
     75  0000 ????				      lda	.YPOS
     76  0000 ????				      SBC	LineIdx	; TODO --- this is going to have be be at EVERY location.....
     77  0000 ????				      BNE	.skip
     78  0000 ????				      lda	#%0000010
     79  0000 ????				      jmp	.end
     80  0000 ????			   .skip
     81  0000 ????				      lda	#%0000000
     82  0000 ????			   .end
     83  0000 ????				      sta	.MISSLE_REG
     84  0000 ????				      ENDM
     85  0000 ????						;--------
     86  0000 ????						; DRAW_PLAYER duration
     87  0000 ????						; Original author: Andy Garber
     88  0000 ????						; Draws a player based on the lineIdx var
     89  0000 ????				      MAC	draw_player
     90  0000 ????			   .YPOS      SET	{1}
     91  0000 ????			   .PLAYER_REG SET	{2}
     92  0000 ????			   .PLAYER_PTR SET	{3}
     93  0000 ????				      lda	LineIdx
     94  0000 ????				      CMP	.YPOS
     95  0000 ????				      BMI	.skip
     96  0000 ????				      CMP	.YPOS,x
     97  0000 ????				      BPL	.skip
     98  0000 ????				      inc	P0Idx
     99  0000 ????				      ldy	P0Idx
    100  0000 ????				      lda	(.PLAYER_PTR),y
    101  0000 ????				      jmp	.end
    102  0000 ????			   .skip
    103  0000 ????				      lda	#%0000000
    104  0000 ????			   .end
    105  0000 ????				      sta	.PLAYER_REG
    106  0000 ????				      ENDM
    107  0000 ????						;--------
    108  0000 ????						; MOVE_PLAYER duration
    109  0000 ????						; Original author: Andy Garber
    110  0000 ????						; Moves the player
    111  0000 ????				      MAC	move_player
    112  0000 ????			   .PLAYEROFFSET SET	{1}
    113  0000 ????			   .LEFT_BOUNDRY SET	{2}
    114  0000 ????			   .RIGHT_BOUNDRY SET	{3}
    115  0000 ????			   .STARTING_JOYSTICK SET	{4}
    116  0000 ????				      ldx	$01
    117  0000 ????				      lda	#.RIGHT_BOUNDRY
    118  0000 ????				      sta	horizontalBoundries
    119  0000 ????				      lda	#.LEFT_BOUNDRY
    120  0000 ????				      sta	horizontalBoundries,x
    121  0000 ????				      lda	#.STARTING_JOYSTICK
    122  0000 ????				      ldy	#.PLAYEROFFSET
    123  0000 ????				      jsr	MoveJoystick
    124  0000 ????				      ENDM
    125  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    126  0000 ????
    127  0000 ????						; Variables segment
    128 U00a8 ????				      seg.u	Variables
    129 U0080					      org	$80
    130 U0080
    131 U0080		       00	   DrawCycle  .byte.b		;-- what cycle of our draws we are on
    132 U0081							; 1: Draw playfield
    133 U0081							; 2: Draw Players
    134 U0081		       00	   DrawPlayer .byte.b		;-- what cycle of our draws we are on
    135 U0082							; 1: Draw playfield
    136 U0082							; 2: Draw Players
    137 U0082
    138 U0082		       00	   LineIdx    .byte.b
    139 U0083
    140 U0083		       00	   loopIntI   .byte.b
    141 U0084		       00	   loopIntJ   .byte.b
    142 U0085		       00	   loopIntK   .byte.b
    143 U0086
    144 U0086		       00 00 00 00*p0_TileBooleans .DS	6
    145 U008c		       00 00 00 00*p1_TileBooleans .DS	6
    146 U0092		       00	   tileBooleansRow .byte.b
    147 U0093		       00 00	   horizontalBoundries .DS	2
    148 U0095
    149 U0095		       00	   P0XPos     .byte.b		;-- X coordinates
    150 U0096		       00	   P1XPos     .byte.b
    151 U0097
    152 U0097		       00 00	   P0YPos     .DS	2	;-- Y coordinate (top than bottom)
    153 U0099		       00 00	   P1YPos     .DS	2
    154 U009b
    155 U009b		       00	   P0MssleYPos .byte.b
    156 U009c		       00	   P1MssleYPos .byte.b
    157 U009d
    158 U009d		       00	   P0Idx      .byte.b		;-- data index of our sprite data
    159 U009e		       00	   P1Idx      .byte.b
    160 U009f
    161 U009f		       00	   P0CIdx     .byte.b		;-- color index of our sprite data
    162 U00a0		       00	   P1CIdx     .byte.b
    163 U00a1
    164 U00a1		       00	   P0FrameIdx .byte.b		;--- animation frame
    165 U00a2		       00	   P0FrameCounter .byte.b		;--- frame counter
    166 U00a3
    167 U00a3		       00 00	   P0Ptr      .DS	2
    168 U00a5		       00 00	   P1Ptr      .DS	2
    169 U00a7
    170 U00a7		       00	   p0ShouldDraw .byte.b		;---true or false, we draw!
    171 U00a8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    172 U00a8							; Code segment
    173  10000 ????				       seg	Code
    174  f000					      org	$f000
    175  f000
    176  f000				   Start
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
    178  f00b
    179  f00b		       a2 05		      ldx	#05
    180  f00d				   init_PF_Tiles
    181  f00d		       a9 82		      lda	#CONS_COLOR_BLUE
    182  f00f		       95 86		      sta	p0_TileBooleans,x
    183  f011		       95 8c		      sta	p1_TileBooleans,x
    184  f013		       ca		      dex
    185  f014		       10 f7		      bpl	init_PF_Tiles
    186  f016		       a9 01		      lda	#$01
    187  f018		       85 0a		      sta	CTRLPF
    188  f01a							;lda #CONS_COLOR_BLACK ; for debug
    189  f01a							;sta p0_TileBooleans+5
    190  f01a							;sta p1_TileBooleans+1
    191  f01a				   init_Players
    192  f01a		       a9 18		      lda	#CONS_BOUNDRY_P0_LEFT+1	; Max Left
    193  f01c		       85 95		      sta	P0XPos
    194  f01e		       a9 93		      lda	#CONS_BOUNDRY_P1_RIGHT-1	; Max right
    195  f020		       85 96		      sta	P1XPos
    196  f022		       a9 03		      lda	#CONS_BOUNDRY_TOP+3
    197  f024		       85 97		      sta	P0YPos
    198  f026		       85 99		      sta	P1YPos
    199  f028		       85 9b		      sta	P0MssleYPos
    200  f02a		       85 9c		      sta	P1MssleYPos
    201  f02c
    202  f02c		       a9 00		      lda	#0
    203  f02e		       85 9d		      sta	P0Idx
    204  f030		       85 9e		      sta	P1Idx
    205  f032		       a9 03		      lda	#CONS_FRAME_ANIMATION_COUNTER
    206  f034		       85 a2		      sta	P0FrameCounter
    207  f036
    208  f036		       a9 68		      lda	#<P0_Frame_0
    209  f038		       85 a3		      sta	P0Ptr
    210  f03a		       a9 f2		      lda	#>P0_Frame_0
    211  f03c		       85 a4		      sta	P0Ptr+1
    212  f03e
    213  f03e		       a9 84		      lda	#<P1_Frame_0
    214  f040		       85 a5		      sta	P1Ptr
    215  f042		       a9 f2		      lda	#>P0_Frame_0
    216  f044		       85 a6		      sta	P1Ptr+1
    217  f046							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    218  f046							; Main
    219  f046				   NextFrame
    220  f046		       4e 82 02 	      lsr	SWCHB	; test Game Reset switch
    221  f049		       90 b5		      bcc	Start	; reset?
    222  f04b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    223  f04b				   Kernal_PreScreen
    224  f04b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0  f04b					      VERTICAL_SYNC		; 1 + 3 lines of VSYNC
      1  f04b		       a9 0e		      lda	#%1110
      2  f04d		       85 02	   .VSLP1     sta	WSYNC
      3  f04f		       85 00		      sta	VSYNC
      4  f051		       4a		      lsr
      5  f052		       d0 f9		      bne	.VSLP1
      0  f054					      TIMER_SETUP	37	; 37 lines of underscan
      1  f054				   .lines     SET	37
      2  f054				   .cycles    SET	((.lines * 76) - 13)
      3  f054
      4  f054
      5  f054				  -	      if	(.cycles % 64) < 12
      6  f054				  -	      lda	#(.cycles / 64) - 1
      7  f054				  -	      sta	WSYNC
      8  f054					      else
      9  f054		       a9 2b		      lda	#(.cycles / 64)
     10  f056		       85 02		      sta	WSYNC
     11  f058					      endif
     12  f058		       8d 96 02 	      sta	TIM64T
    227  f05b
    228  f05b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    229  f05b				   Kernal_Screen
    230  f05b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      
      0  f05b					      CLEAR_PLAYFIELD
      1  f05b		       a9 00		      lda	#%00000000
      2  f05d		       85 0d		      sta	PF0
      3  f05f		       85 0e		      sta	PF1
      4  f061		       85 0f		      sta	PF2
    232  f063		       a9 4a		      lda	#CONS_COLOR_PINK
    233  f065		       85 06		      sta	COLUP0
    234  f067		       a9 ca		      lda	#CONS_COLOR_CHART
    235  f069		       85 07		      sta	COLUP1
    236  f06b		       a9 00		      lda	#CONS_COLOR_BLACK
    237  f06d		       85 09		      sta	COLUBK
    238  f06f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    239  f06f							;		 Main (192 lines)
    240  f06f							; What is a Kernal?
    241  f06f							; These are groupings of line sections.
    242  f06f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    243  f06f				   Kernal_Movement
    244  f06f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    245  f06f							; This is where we do player X logic
    246  f06f							; Set Player 1 x position
    247  f06f		       a5 95		      lda	P0XPos	; get X coordinate
    248  f071		       a2 00		      ldx	#0	; player 0
    249  f073		       20 ef f1 	      jsr	SetHorizPos	; set coarse offset
    250  f076
    251  f076		       a5 96		      lda	P1XPos	; get X coordinate
    252  f078		       a2 01		      ldx	#1	; player 1
    253  f07a		       20 ef f1 	      jsr	SetHorizPos	; set coarse offset
    254  f07d
    255  f07d		       85 02		      sta	WSYNC	; sync w/ scanline
    256  f07f		       85 2a		      sta	HMOVE	; apply fine offsets
    257  f081
    258  f081		       a9 00		      lda	#0
    259  f083		       85 9d		      sta	P0Idx
    260  f085		       85 9e		      sta	P1Idx
      0  f087					      TIMER_WAIT
      1  f087				   .waittimer
      2  f087		       ad 84 02 	      lda	INTIM
      3  f08a		       d0 fb		      bne	.waittimer
      4  f08c		       85 02		      sta	WSYNC
    262  f08e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
    263  f08e		       85 02		      sta	WSYNC
    264  f090				   Kernal_Tower
    265  f090							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    266  f090							; Background art for the upper half of the game.
    267  f090							; PF is set to Mirror and we just draw. than wait
    268  f090							; The BLACK we see is really the PF mirroed.
    269  f090							; Color of the towers is controlled by the background.
    270  f090							; TODO make this less gross.
    271  f090		       a9 00		      lda	#CONS_COLOR_BLACK
    272  f092		       85 08		      sta	COLUPF
    273  f094							; These are ALWAYS the same
    274  f094		       a9 f0		      lda	#%11110000
    275  f096		       85 0d		      sta	PF0
    276  f098		       a9 7f		      lda	#%01111111
    277  f09a		       85 0f		      sta	PF2
    278  f09c
    279  f09c		       a2 00		      ldx	#$0
    280  f09e		       a0 48		      ldy	#$48
    281  f0a0		       85 02		      sta	WSYNC
    282  f0a2				   Kernal_Tower_Draw
    283  f0a2		       85 02		      sta	WSYNC
    284  f0a4		       98		      tya
    285  f0a5		       c9 40		      cmp	#$40
    286  f0a7		       30 08		      bmi	Kernal_Tower_WaitASecond
    287  f0a9		       bd 44 f2 	      lda	PF_Kernal_Tower,x+1
    288  f0ac		       85 0e		      sta	PF1
    289  f0ae		       4c b5 f0 	      jmp	Kernal_Tower_Draw_Colorize
    290  f0b1				   Kernal_Tower_WaitASecond
    291  f0b1		       a9 f7		      lda	#%11110111
    292  f0b3		       85 0e		      sta	PF1
    293  f0b5				   Kernal_Tower_Draw_Colorize
    294  f0b5		       a9 40		      lda	#CONS_COLOR_RED
    295  f0b7		       85 09		      sta	COLUBK
      0  f0b9					      SLEEP	16	;; as we add more code for playfield, edit this.
      1  f0b9				   .CYCLES    SET	16
      2  f0b9
      3  f0b9				  -	      IF	.CYCLES < 2
      4  f0b9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b9				  -	      ERR
      6  f0b9					      ENDIF
      7  f0b9
      8  f0b9				  -	      IF	.CYCLES & 1
      9  f0b9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b9				  -	      nop	0
     11  f0b9				  -	      ELSE
     12  f0b9				  -	      bit	VSYNC
     13  f0b9				  -	      ENDIF
     14  f0b9				  -.CYCLES    SET	.CYCLES - 3
     15  f0b9					      ENDIF
     16  f0b9
     17  f0b9					      REPEAT	.CYCLES / 2
     18  f0b9		       ea		      nop
     17  f0b9					      REPEND
     18  f0ba		       ea		      nop
     17  f0ba					      REPEND
     18  f0bb		       ea		      nop
     17  f0bb					      REPEND
     18  f0bc		       ea		      nop
     17  f0bc					      REPEND
     18  f0bd		       ea		      nop
     17  f0bd					      REPEND
     18  f0be		       ea		      nop
     17  f0be					      REPEND
     18  f0bf		       ea		      nop
     17  f0bf					      REPEND
     18  f0c0		       ea		      nop
     19  f0c1					      REPEND
    297  f0c1		       a9 8d		      lda	#CONS_COLOR_TEAL
    298  f0c3		       85 09		      sta	COLUBK
      0  f0c5					      SLEEP	8
      1  f0c5				   .CYCLES    SET	8
      2  f0c5
      3  f0c5				  -	      IF	.CYCLES < 2
      4  f0c5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0c5				  -	      ERR
      6  f0c5					      ENDIF
      7  f0c5
      8  f0c5				  -	      IF	.CYCLES & 1
      9  f0c5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0c5				  -	      nop	0
     11  f0c5				  -	      ELSE
     12  f0c5				  -	      bit	VSYNC
     13  f0c5				  -	      ENDIF
     14  f0c5				  -.CYCLES    SET	.CYCLES - 3
     15  f0c5					      ENDIF
     16  f0c5
     17  f0c5					      REPEAT	.CYCLES / 2
     18  f0c5		       ea		      nop
     17  f0c5					      REPEND
     18  f0c6		       ea		      nop
     17  f0c6					      REPEND
     18  f0c7		       ea		      nop
     17  f0c7					      REPEND
     18  f0c8		       ea		      nop
     19  f0c9					      REPEND
    300  f0c9		       a9 c6		      lda	#CONS_COLOR_GREEN
    301  f0cb		       85 09		      sta	COLUBK
    302  f0cd		       e8		      inx
    303  f0ce		       e8		      inx
    304  f0cf		       e8		      inx
    305  f0d0		       88		      dey
    306  f0d1		       d0 cf		      bne	Kernal_Tower_Draw
    307  f0d3				   Kernal_Tower_End
    308  f0d3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    309  f0d3		       a9 00		      lda	#CONS_COLOR_BLACK
    310  f0d5		       85 09		      sta	COLUBK
      0  f0d7					      CLEAR_PLAYFIELD
      1  f0d7		       a9 00		      lda	#%00000000
      2  f0d9		       85 0d		      sta	PF0
      3  f0db		       85 0e		      sta	PF1
      4  f0dd		       85 0f		      sta	PF2
    312  f0df		       a9 82		      lda	#CONS_COLOR_BLUE
    313  f0e1		       85 08		      sta	COLUPF
    314  f0e3		       a2 02		      ldx	#2	; this will always do +1 what you want
    315  f0e5		       86 83		      stx	loopIntI
    316  f0e7		       a9 f0		      lda	#%11110000
    317  f0e9				   Kernal_Stairs
    318  f0e9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    319  f0e9							; This draws a nice staircase from our tower
    320  f0e9							; More background mumbo jumbo
    321  f0e9							; TODO -- allow drawing of player here?
    322  f0e9							;	   this would allow cooler view!
    323  f0e9		       a2 03		      ldx	#3	; this will always do +1 what you want
    324  f0eb		       86 84		      stx	loopIntJ
    325  f0ed				   Kernal_Stairs_J
    326  f0ed		       85 02		      sta	WSYNC
    327  f0ef		       85 0f		      sta	PF2
    328  f0f1		       c6 84		      DEC	loopIntJ
    329  f0f3		       10 f8		      BPL	Kernal_Stairs_J
    330  f0f5		       4a		      LSR
    331  f0f6		       4a		      LSR
    332  f0f7		       c6 83		      DEC	loopIntI
    333  f0f9		       10 ee		      BPL	Kernal_Stairs
    334  f0fb		       85 02		      sta	WSYNC
    335  f0fd
    336  f0fd							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    337  f0fd				   Kernal_Gap
    338  f0fd							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    339  f0fd							; This is just a spacing between the tiles
    340  f0fd							; we setup the presets for the complex stuff below!
    341  f0fd							; Maybe just make this part of the loop below? make my tile horizontal breaks 2 cycles each?
    342  f0fd
      0  f0fd					      CLEAR_PLAYFIELD
      1  f0fd		       a9 00		      lda	#%00000000
      2  f0ff		       85 0d		      sta	PF0
      3  f101		       85 0e		      sta	PF1
      4  f103		       85 0f		      sta	PF2
    344  f105		       a9 00		      lda	#CONS_COLOR_BLACK
    345  f107		       85 08		      sta	COLUPF
    346  f109
    347  f109		       a9 70		      lda	#%01110000
    348  f10b		       85 0d		      sta	PF0
    349  f10d		       a9 04		      lda	#%000000100
    350  f10f		       85 0e		      sta	PF1
    351  f111		       a9 f0		      lda	#%11110000
    352  f113		       85 0f		      sta	PF2
    353  f115
    354  f115		       a9 00		      lda	#0
    355  f117		       85 82		      sta	LineIdx
    356  f119		       a9 03		      lda	#3	; this will always do +1 what you want
    357  f11b		       85 83		      sta	loopIntI
    358  f11d
    359  f11d		       a2 00		      ldx	#0	; uused to change address levels
    360  f11f		       86 92		      stx	tileBooleansRow
    361  f121		       85 02		      sta	WSYNC
    362  f123							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    363  f123				   Kernal_CombatField
    364  f123							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    365  f123		       a5 0f		      lda	CONS_TILE_HEIGHT
    366  f125		       85 84		      sta	loopIntJ
    367  f127				   Kernal_CombatField_startOfDraw
    368  f127		       85 02		      sta	WSYNC
    369  f129
    370  f129				   Kernal_CombatField_DrawPlayfied
    371  f129		       a6 92		      ldx	tileBooleansRow
    372  f12b
    373  f12b		       b5 86		      lda	p0_TileBooleans,x
    374  f12d		       85 09		      sta	COLUBK
    375  f12f
      0  f12f					      SLEEP	21
      1  f12f				   .CYCLES    SET	21
      2  f12f
      3  f12f				  -	      IF	.CYCLES < 2
      4  f12f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f12f				  -	      ERR
      6  f12f					      ENDIF
      7  f12f
      8  f12f					      IF	.CYCLES & 1
      9  f12f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f12f		       04 00		      nop	0
     11  f131				  -	      ELSE
     12  f131				  -	      bit	VSYNC
     13  f131					      ENDIF
     14  f131				   .CYCLES    SET	.CYCLES - 3
     15  f131					      ENDIF
     16  f131
     17  f131					      REPEAT	.CYCLES / 2
     18  f131		       ea		      nop
     17  f131					      REPEND
     18  f132		       ea		      nop
     17  f132					      REPEND
     18  f133		       ea		      nop
     17  f133					      REPEND
     18  f134		       ea		      nop
     17  f134					      REPEND
     18  f135		       ea		      nop
     17  f135					      REPEND
     18  f136		       ea		      nop
     17  f136					      REPEND
     18  f137		       ea		      nop
     17  f137					      REPEND
     18  f138		       ea		      nop
     17  f138					      REPEND
     18  f139		       ea		      nop
     19  f13a					      REPEND
    377  f13a
    378  f13a		       b5 87		      lda	p0_TileBooleans,x+1
    379  f13c		       85 09		      sta	COLUBK
    380  f13e
      0  f13e					      SLEEP	5
      1  f13e				   .CYCLES    SET	5
      2  f13e
      3  f13e				  -	      IF	.CYCLES < 2
      4  f13e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f13e				  -	      ERR
      6  f13e					      ENDIF
      7  f13e
      8  f13e					      IF	.CYCLES & 1
      9  f13e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f13e		       04 00		      nop	0
     11  f140				  -	      ELSE
     12  f140				  -	      bit	VSYNC
     13  f140					      ENDIF
     14  f140				   .CYCLES    SET	.CYCLES - 3
     15  f140					      ENDIF
     16  f140
     17  f140					      REPEAT	.CYCLES / 2
     18  f140		       ea		      nop
     19  f141					      REPEND
    382  f141
    383  f141		       b5 8c		      lda	p1_TileBooleans,x
    384  f143		       85 09		      sta	COLUBK
    385  f145
      0  f145					      SLEEP	10
      1  f145				   .CYCLES    SET	10
      2  f145
      3  f145				  -	      IF	.CYCLES < 2
      4  f145				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f145				  -	      ERR
      6  f145					      ENDIF
      7  f145
      8  f145				  -	      IF	.CYCLES & 1
      9  f145				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f145				  -	      nop	0
     11  f145				  -	      ELSE
     12  f145				  -	      bit	VSYNC
     13  f145				  -	      ENDIF
     14  f145				  -.CYCLES    SET	.CYCLES - 3
     15  f145					      ENDIF
     16  f145
     17  f145					      REPEAT	.CYCLES / 2
     18  f145		       ea		      nop
     17  f145					      REPEND
     18  f146		       ea		      nop
     17  f146					      REPEND
     18  f147		       ea		      nop
     17  f147					      REPEND
     18  f148		       ea		      nop
     17  f148					      REPEND
     18  f149		       ea		      nop
     19  f14a					      REPEND
    387  f14a
    388  f14a
    389  f14a		       b5 8d		      lda	p1_TileBooleans,x+1
    390  f14c		       85 09		      sta	COLUBK
    391  f14e
      0  f14e					      SLEEP	4
      1  f14e				   .CYCLES    SET	4
      2  f14e
      3  f14e				  -	      IF	.CYCLES < 2
      4  f14e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f14e				  -	      ERR
      6  f14e					      ENDIF
      7  f14e
      8  f14e				  -	      IF	.CYCLES & 1
      9  f14e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f14e				  -	      nop	0
     11  f14e				  -	      ELSE
     12  f14e				  -	      bit	VSYNC
     13  f14e				  -	      ENDIF
     14  f14e				  -.CYCLES    SET	.CYCLES - 3
     15  f14e					      ENDIF
     16  f14e
     17  f14e					      REPEAT	.CYCLES / 2
     18  f14e		       ea		      nop
     17  f14e					      REPEND
     18  f14f		       ea		      nop
     19  f150					      REPEND
    393  f150
    394  f150		       a9 00		      lda	#CONS_COLOR_BLACK
    395  f152		       85 09		      sta	COLUBK
    396  f154
    397  f154				   Kernal_CombatField_DrawPlayers
    398  f154		       a6 01		      ldx	$01
      0  f156					      DRAW_PLAYER	P0YPos, GRP0, P0Ptr
      1  f156				   .YPOS      SET	P0YPos
      2  f156				   .PLAYER_REG SET	GRP0
      3  f156				   .PLAYER_PTR SET	P0Ptr
      4  f156		       a5 82		      lda	LineIdx
      5  f158		       c5 97		      CMP	.YPOS
      6  f15a		       30 0d		      BMI	.skip
      7  f15c		       d5 97		      CMP	.YPOS,x
      8  f15e		       10 09		      BPL	.skip
      9  f160		       e6 9d		      inc	P0Idx
     10  f162		       a4 9d		      ldy	P0Idx
     11  f164		       b1 a3		      lda	(.PLAYER_PTR),y
     12  f166		       4c 6b f1 	      jmp	.end
     13  f169				   .skip
     14  f169		       a9 00		      lda	#%0000000
     15  f16b				   .end
     16  f16b		       85 1b		      sta	.PLAYER_REG
      0  f16d					      DRAW_PLAYER	P1YPos, GRP1, P1Ptr
      1  f16d				   .YPOS      SET	P1YPos
      2  f16d				   .PLAYER_REG SET	GRP1
      3  f16d				   .PLAYER_PTR SET	P1Ptr
      4  f16d		       a5 82		      lda	LineIdx
      5  f16f		       c5 99		      CMP	.YPOS
      6  f171		       30 0d		      BMI	.skip
      7  f173		       d5 99		      CMP	.YPOS,x
      8  f175		       10 09		      BPL	.skip
      9  f177		       e6 9d		      inc	P0Idx
     10  f179		       a4 9d		      ldy	P0Idx
     11  f17b		       b1 a5		      lda	(.PLAYER_PTR),y
     12  f17d		       4c 82 f1 	      jmp	.end
     13  f180				   .skip
     14  f180		       a9 00		      lda	#%0000000
     15  f182				   .end
     16  f182		       85 1c		      sta	.PLAYER_REG
    401  f184							;DRAW_MISSLE P0MssleYPos, ENAM0
    402  f184							;DRAW_MISSLE P1MssleYPos, ENAM1
    403  f184				   Kernal_CombatField_EndOfDraw
    404  f184		       e6 82		      inc	LineIdx
    405  f186		       c6 84		      dec	loopIntJ
    406  f188		       d0 9d		      bne	Kernal_CombatField_startOfDraw
    407  f18a
    408  f18a		       85 02		      sta	WSYNC
    409  f18c		       65 92		      adc	tileBooleansRow
    410  f18e		       65 92		      adc	tileBooleansRow
    411  f190		       c6 83		      dec	loopIntI
    412  f192		       d0 8f		      bne	Kernal_CombatField
    413  f194
      0  f194					      MOVE_PLAYER	$0,CONS_BOUNDRY_P0_LEFT,CONS_BOUNDRY_P0_RIGHT,CONS_P0_STARTING_JOYSTICK_BYTE
      1  f194				   .PLAYEROFFSET SET	$0
      2  f194				   .LEFT_BOUNDRY SET	CONS_BOUNDRY_P0_LEFT
      3  f194				   .RIGHT_BOUNDRY SET	CONS_BOUNDRY_P0_RIGHT
      4  f194				   .STARTING_JOYSTICK SET	CONS_P0_STARTING_JOYSTICK_BYTE
      5  f194		       a6 01		      ldx	$01
      6  f196		       a9 40		      lda	#.RIGHT_BOUNDRY
      7  f198		       85 93		      sta	horizontalBoundries
      8  f19a		       a9 17		      lda	#.LEFT_BOUNDRY
      9  f19c		       95 93		      sta	horizontalBoundries,x
     10  f19e		       a9 80		      lda	#.STARTING_JOYSTICK
     11  f1a0		       a0 00		      ldy	#.PLAYEROFFSET
     12  f1a2		       20 01 f2 	      jsr	MoveJoystick
      0  f1a5					      MOVE_PLAYER	$2,CONS_BOUNDRY_P1_LEFT,CONS_BOUNDRY_P1_RIGHT,CONS_P1_STARTING_JOYSTICK_BYTE
      1  f1a5				   .PLAYEROFFSET SET	$2
      2  f1a5				   .LEFT_BOUNDRY SET	CONS_BOUNDRY_P1_LEFT
      3  f1a5				   .RIGHT_BOUNDRY SET	CONS_BOUNDRY_P1_RIGHT
      4  f1a5				   .STARTING_JOYSTICK SET	CONS_P1_STARTING_JOYSTICK_BYTE
      5  f1a5		       a6 01		      ldx	$01
      6  f1a7		       a9 94		      lda	#.RIGHT_BOUNDRY
      7  f1a9		       85 93		      sta	horizontalBoundries
      8  f1ab		       a9 6c		      lda	#.LEFT_BOUNDRY
      9  f1ad		       95 93		      sta	horizontalBoundries,x
     10  f1af		       a9 08		      lda	#.STARTING_JOYSTICK
     11  f1b1		       a0 02		      ldy	#.PLAYEROFFSET
     12  f1b3		       20 01 f2 	      jsr	MoveJoystick
    416  f1b6							; TODO -- this should be a subroutine, and ought to be better handled!
    417  f1b6				   ChangeSprites
    418  f1b6		       a5 a2		      lda	P0FrameCounter
    419  f1b8		       c9 00		      cmp	#0
    420  f1ba		       10 21		      bpl	EndOfSprites
    421  f1bc							;TODO -- can probaby handle this faster!
      0  f1bc					      FLIP_BOOL	P0FrameIdx
      1  f1bc				   .MEMADDR   SET	P0FrameIdx
      2  f1bc		       a5 a1		      lda	.MEMADDR
      3  f1be		       49 01		      EOR	#$01
      4  f1c0		       85 a1		      sta	.MEMADDR
    423  f1c2		       c9 01		      cmp	#$01
    424  f1c4		       f0 0b		      beq	DrawFrameB
    425  f1c6				   DrawFrameA
    426  f1c6		       a9 68		      lda	#<P0_Frame_0
    427  f1c8		       85 a3		      sta	P0Ptr
    428  f1ca		       a9 f2		      lda	#>P0_Frame_0
    429  f1cc		       85 a4		      sta	P0Ptr+1
    430  f1ce		       4c d9 f1 	      jmp	ResetFrameTimer
    431  f1d1				   DrawFrameB
    432  f1d1		       a9 76		      lda	#<P0_Frame_1
    433  f1d3		       85 a3		      sta	P0Ptr
    434  f1d5		       a9 f2		      lda	#>P0_Frame_1
    435  f1d7		       85 a4		      sta	P0Ptr+1
    436  f1d9				   ResetFrameTimer
    437  f1d9		       a9 03		      lda	#CONS_FRAME_ANIMATION_COUNTER
    438  f1db		       85 a2		      sta	P0FrameCounter
    439  f1dd				   EndOfSprites
    440  f1dd		       ea		      nop		;DEBUG! til i fill this out
    441  f1de							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    442  f1de							; 29 lines of overscan
    443  f1de				   Overscan
    444  f1de							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0  f1de					      TIMER_SETUP	29
      1  f1de				   .lines     SET	29
      2  f1de				   .cycles    SET	((.lines * 76) - 13)
      3  f1de
      4  f1de
      5  f1de				  -	      if	(.cycles % 64) < 12
      6  f1de				  -	      lda	#(.cycles / 64) - 1
      7  f1de				  -	      sta	WSYNC
      8  f1de					      else
      9  f1de		       a9 22		      lda	#(.cycles / 64)
     10  f1e0		       85 02		      sta	WSYNC
     11  f1e2					      endif
     12  f1e2		       8d 96 02 	      sta	TIM64T
      0  f1e5					      TIMER_WAIT
      1  f1e5				   .waittimer
      2  f1e5		       ad 84 02 	      lda	INTIM
      3  f1e8		       d0 fb		      bne	.waittimer
      4  f1ea		       85 02		      sta	WSYNC
    447  f1ec							; total = 262 lines, go to next frame
    448  f1ec		       4c 46 f0 	      jmp	NextFrame
    449  f1ef							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    450  f1ef							; Subroutines
    451  f1ef							;;;;;;;;;;;;;;;;;;;;;
    452  f1ef							; SetHorizPos routine
    453  f1ef							; A = X coordinate
    454  f1ef							; X = player number (0 or 1)
    455  f1ef				   SetHorizPos
    456  f1ef		       85 02		      sta	WSYNC	; start a new line
    457  f1f1		       38		      sec		; set carry flag
    458  f1f2				   DivideLoop
    459  f1f2		       e9 0f		      sbc	#15	; subtract 15
    460  f1f4		       b0 fc		      bcs	DivideLoop	; branch until negative
    461  f1f6		       49 07		      eor	#7	; calculate fine offset
    462  f1f8		       0a		      asl
    463  f1f9		       0a		      asl
    464  f1fa		       0a		      asl
    465  f1fb		       0a		      asl
    466  f1fc		       95 10		      sta	RESP0,x	; fix coarse position
    467  f1fe		       95 20		      sta	HMP0,x	; set fine offset
    468  f200		       60		      rts		; return to caller
    469  f201							;;;;;;;;;;;;;;;;;;;;;
    470  f201							; #%10000000 -- P1 Right
    471  f201							; #%01000000 -- P1 left
    472  f201							; #%00100000 -- P1 down
    473  f201							; #%00010000 -- P1 up
    474  f201							; #%00001000 -- P0 Right
    475  f201							; #%00000100 -- P0 left
    476  f201							; #%00000010 -- P0 down
    477  f201							; #%00000001 -- P0 up
    478  f201							; Y gives us our offsets
    479  f201							; A is our initial starting controller
    480  f201				   MoveJoystick
    481  f201							; ----- Start Horizontal
    482  f201		       b6 95		      ldx	P0XPos,y
    483  f203		       2c 80 02 	      bit	SWCHA
    484  f206		       d0 07		      bne	SkipMoveRight
    485  f208		       e4 93		      cpx	horizontalBoundries
    486  f20a		       b0 03		      bcs	SkipMoveRight
    487  f20c		       e8		      inx
    488  f20d		       c6 a2		      dec	P0FrameCounter
    489  f20f				   SkipMoveRight
    490  f20f		       4a		      LSR		;---- read LEFT
    491  f210		       2c 80 02 	      bit	SWCHA
    492  f213		       d0 07		      bne	SkipMoveLeft
    493  f215		       e4 94		      cpx	horizontalBoundries+1
    494  f217		       90 03		      bcc	SkipMoveLeft
    495  f219		       ca		      dex
    496  f21a		       c6 a2		      dec	P0FrameCounter
    497  f21c				   SkipMoveLeft
    498  f21c		       96 95		      stx	P0XPos,y
    499  f21e							; ----- Now Vertical
    500  f21e		       b6 97		      ldx	P0YPos,y
    501  f220		       4a		      LSR		;--- read Down
    502  f221		       2c 80 02 	      bit	SWCHA
    503  f224		       d0 07		      bne	SkipMoveDown
    504  f226		       e0 1d		      cpx	#CONS_BOUNDRY_BOTTOM
    505  f228		       f0 03		      beq	SkipMoveDown
    506  f22a		       e8		      inx
    507  f22b		       c6 a2		      dec	P0FrameCounter
    508  f22d				   SkipMoveDown
    509  f22d		       4a		      LSR		;--- read UP
    510  f22e		       2c 80 02 	      bit	SWCHA
    511  f231		       d0 07		      bne	SkipMoveUp
    512  f233		       e0 00		      cpx	#CONS_BOUNDRY_TOP
    513  f235		       f0 03		      beq	SkipMoveUp
    514  f237		       ca		      dex
    515  f238		       c6 a2		      dec	P0FrameCounter
    516  f23a				   SkipMoveUp
    517  f23a		       96 97		      stx	P0YPos,y
    518  f23c		       8a		      txa
    519  f23d		       69 12		      adc	#$12
    520  f23f		       99 98 00 	      sta	P0YPos,y+1
    521  f242		       60		      rts
    522  f243							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    523  f243							; Data
    524  f243							;;;;;;;;;;;;;;;;;;;;;
    525  f243				   PF_Kernal_Tower
    526  f243		       f0		      .byte.b	#%11110000
    527  f244		       f7		      .byte.b	#%11110111
    528  f245		       7f		      .byte.b	#%01111111
    529  f246
    530  f246		       f0		      .byte.b	#%11110000
    531  f247		       f7		      .byte.b	#%11110111
    532  f248		       7f		      .byte.b	#%01111111
    533  f249
    534  f249		       f0		      .byte.b	#%11110000
    535  f24a		       f7		      .byte.b	#%11110111
    536  f24b		       7f		      .byte.b	#%01111111
    537  f24c							;----------------------------
    538  f24c		       f0		      .byte.b	#%11110000
    539  f24d		       e3		      .byte.b	#%11100011
    540  f24e		       7f		      .byte.b	#%01111111
    541  f24f
    542  f24f		       f0		      .byte.b	#%11110000
    543  f250		       e3		      .byte.b	#%11100011
    544  f251		       7f		      .byte.b	#%01111111
    545  f252
    546  f252		       f0		      .byte.b	#%11110000
    547  f253		       e3		      .byte.b	#%11100011
    548  f254		       7f		      .byte.b	#%01111111
    549  f255							;----------------------------
    550  f255		       f0		      .byte.b	#%11110000
    551  f256		       c1		      .byte.b	#%11000001
    552  f257		       7f		      .byte.b	#%01111111
    553  f258
    554  f258		       f0		      .byte.b	#%11110000
    555  f259		       c1		      .byte.b	#%11000001
    556  f25a		       7f		      .byte.b	#%01111111
    557  f25b
    558  f25b		       f0		      .byte.b	#%11110000
    559  f25c		       c1		      .byte.b	#%11000001
    560  f25d		       7f		      .byte.b	#%01111111
    561  f25e							;----------------------------
    562  f25e		       f0		      .byte.b	#%11110000
    563  f25f		       80		      .byte.b	#%10000000
    564  f260		       7f		      .byte.b	#%01111111
    565  f261
    566  f261		       f0		      .byte.b	#%11110000
    567  f262		       80		      .byte.b	#%10000000
    568  f263		       7f		      .byte.b	#%01111111
    569  f264
    570  f264		       f0		      .byte.b	#%11110000
    571  f265		       80		      .byte.b	#%10000000
    572  f266		       7f		      .byte.b	#%01111111
    573  f267							;----------------------------
    574  f267		       00		      .byte.b	#0
    575  f268				   P0_Frame_0
    576  f268							; draw from top to bottom
    577  f268		       7c		      .byte.b	#%01111100
    578  f269		       7e		      .byte.b	#%01111110
    579  f26a		       68		      .byte.b	#%01101000
    580  f26b		       7c		      .byte.b	#%01111100
    581  f26c		       3c		      .byte.b	#%00111100
    582  f26d		       00		      .byte.b	#%00000000
    583  f26e		       78		      .byte.b	#%01111000
    584  f26f		       bd		      .byte.b	#%10111101
    585  f270		       be		      .byte.b	#%10111110
    586  f271		       5c		      .byte.b	#%01011100
    587  f272		       78		      .byte.b	#%01111000
    588  f273		       00		      .byte.b	#%00000000
    589  f274		       76		      .byte.b	#%01110110
    590  f275		       00		      .byte.b	#0
    591  f276				   P0_Frame_1
    592  f276							; draw from top to bottom
    593  f276		       7c		      .byte.b	#%01111100
    594  f277		       7e		      .byte.b	#%01111110
    595  f278		       68		      .byte.b	#%01101000
    596  f279		       7c		      .byte.b	#%01111100
    597  f27a		       3c		      .byte.b	#%00111100
    598  f27b		       00		      .byte.b	#%00000000
    599  f27c		       78		      .byte.b	#%01111000
    600  f27d		       bd		      .byte.b	#%10111101
    601  f27e		       be		      .byte.b	#%10111110
    602  f27f		       5c		      .byte.b	#%01011100
    603  f280		       78		      .byte.b	#%01111000
    604  f281		       00		      .byte.b	#%00000000
    605  f282		       3c		      .byte.b	#%00111100
    606  f283		       00		      .byte.b	#0
    607  f284				   P1_Frame_0
    608  f284							; draw from top to bottom
    609  f284		       3e		      .byte.b	#%00111110	; 0x3E
    610  f285		       7e		      .byte.b	#%01111110	; 0x7E
    611  f286		       16		      .byte.b	#%00010110	; 0x16
    612  f287		       3e		      .byte.b	#%00111110	; 0x3E
    613  f288		       3c		      .byte.b	#%00111100	; 0x3C
    614  f289		       00		      .byte.b	#%00000000	; 0x00
    615  f28a		       1e		      .byte.b	#%00011110	; 0x1E
    616  f28b		       bd		      .byte.b	#%10111101	; 0xBD
    617  f28c		       7d		      .byte.b	#%01111101	; 0x7D
    618  f28d		       3a		      .byte.b	#%00111010	; 0x3A
    619  f28e		       1e		      .byte.b	#%00011110	; 0x1E
    620  f28f		       00		      .byte.b	#%00000000	; 0x00
    621  f290		       6e		      .byte.b	#%01101110	; 0x6E
    622  f291		       00		      .byte.b	#0
    623  f292							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    624  f292							; Epilogue
    625  f292							;;;;;;;;;;;;;;;;;;;;;
    626  fffc					      org	$fffc
    627  fffc		       00 f0		      .word.w	Start	; reset vector
    628  fffe		       00 f0		      .word.w	Start	; BRK vector
