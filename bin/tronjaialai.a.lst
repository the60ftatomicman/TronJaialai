------- FILE tronjaialai.a LEVEL 1 PASS 2
      1  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      2  10000 ????						; Header
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE tronjaialai.a
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????						;-------------------------------------------------------
    163  0000 ????						; SKIP_SCANLINES #lines
    164  0000 ????						;
    165  0000 ????						; Skip a given # of scanlines.
    166  0000 ????						; Sets the X register to zero.
    167  0000 ????
    168  0000 ????				      MAC	skip_scanlines
    169  0000 ????			   .LINES     SET	{1}
    170  0000 ????				      ldx	#.LINES
    171  0000 ????			   .vblank    sta	WSYNC
    172  0000 ????				      dex
    173  0000 ????				      bne	.vblank
    174  0000 ????				      ENDM
    175  0000 ????
    176  0000 ????						; EOF
------- FILE tronjaialai.a
      6  0000 ????						; include "custom_macro.h" ; -- do so much work online this seems nice but necessary atm
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????			   .cycles    SET	((.lines * 76) - 13)
     11  0000 ????						; special case for when we have two timer events in a line
     12  0000 ????						; and our 2nd event straddles the WSYNC boundary
     13  0000 ????				      if	(.cycles % 64) < 12
     14  0000 ????				      lda	#(.cycles / 64) - 1
     15  0000 ????				      sta	WSYNC
     16  0000 ????				      else
     17  0000 ????				      lda	#(.cycles / 64)
     18  0000 ????				      sta	WSYNC
     19  0000 ????				      endif
     20  0000 ????				      sta	TIM64T
     21  0000 ????				      ENDM
     22  0000 ????
     23  0000 ????						;-------------------------------------------------------
     24  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     25  0000 ????						; Performs a WSYNC afterwards.
     26  0000 ????
     27  0000 ????				      MAC	timer_wait
     28  0000 ????			   .waittimer
     29  0000 ????				      lda	INTIM
     30  0000 ????				      bne	.waittimer
     31  0000 ????				      sta	WSYNC
     32  0000 ????				      ENDM
------- FILE tronjaialai.a
      8  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      9  0000 ????						; Constants
     10  0000 ????	       00 f2	   CONS_PLAYER_HEIGHT EQU	$F2	; FF-intended height
     11  0000 ????	       00 0f	   CONS_TILE_HEIGHT EQU	#15
     12  0000 ????	       00 00	   CONS_TILE_HIDE EQU	%00000000
     13  0000 ????
     14  0000 ????	       00 00	   CONS_COLOR_BLACK EQU	$00
     15  0000 ????	       00 40	   CONS_COLOR_RED EQU	$40
     16  0000 ????	       00 4a	   CONS_COLOR_PINK EQU	$4A
     17  0000 ????	       00 82	   CONS_COLOR_BLUE EQU	$82
     18  0000 ????	       00 8d	   CONS_COLOR_TEAL EQU	$8D
     19  0000 ????	       00 c6	   CONS_COLOR_GREEN EQU	$C6
     20  0000 ????	       00 ca	   CONS_COLOR_CHART EQU	$CA
     21  0000 ????
     22  0000 ????	       00 03	   CONS_FRAME_ANIMATION_COUNTER EQU	$03
     23  0000 ????
     24  0000 ????	       00 80	   CONS_P0_STARTING_JOYSTICK_BYTE EQU	%10000000
     25  0000 ????	       00 08	   CONS_P1_STARTING_JOYSTICK_BYTE EQU	%00001000
     26  0000 ????	       00 17	   CONS_BOUNDRY_P0_LEFT EQU	#23
     27  0000 ????	       00 40	   CONS_BOUNDRY_P0_RIGHT EQU	#64
     28  0000 ????	       00 6c	   CONS_BOUNDRY_P1_LEFT EQU	#108
     29  0000 ????	       00 94	   CONS_BOUNDRY_P1_RIGHT EQU	#148
     30  0000 ????	       00 00	   CONS_BOUNDRY_TOP EQU	#00
     31  0000 ????	       00 1d	   CONS_BOUNDRY_BOTTOM EQU	#29
     32  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     33  0000 ????						; Macros
     34  0000 ????						; TODO add to includes
     35  0000 ????						;--------
     36  0000 ????						; FLIP_BOOL duration
     37  0000 ????						; Original author: Andy Garber
     38  0000 ????						; Takes a memory address and flips it's value than stores it
     39  0000 ????						; Assumes the Memory address value is 1 or 0
     40  0000 ????						;usage: FLIP_BOOL SomeAddress
     41  0000 ????				      MAC	flip_bool
     42  0000 ????			   .MEMADDR   SET	{1}
     43  0000 ????				      lda	.MEMADDR
     44  0000 ????				      EOR	#$01
     45  0000 ????				      sta	.MEMADDR
     46  0000 ????				      ENDM
     47  0000 ????						;--------
     48  0000 ????						; CLEAR_PLAYFIELD duration
     49  0000 ????						; Original author: Andy Garber
     50  0000 ????						; sets playfield to 0 across the board
     51  0000 ????				      MAC	clear_playfield
     52  0000 ????				      lda	#%00000000
     53  0000 ????				      sta	PF0
     54  0000 ????				      sta	PF1
     55  0000 ????				      sta	PF2
     56  0000 ????				      ENDM
     57  0000 ????
     58  0000 ????						;--------
     59  0000 ????						; FILL_PLAYFIELD duration
     60  0000 ????						; Original author: Andy Garber
     61  0000 ????						; sets playfield to 1 across the board
     62  0000 ????				      MAC	fill_playfield
     63  0000 ????				      lda	#%11111111
     64  0000 ????				      sta	PF0
     65  0000 ????				      sta	PF1
     66  0000 ????				      sta	PF2
     67  0000 ????				      ENDM
     68  0000 ????						;--------
     69  0000 ????						; DRAW_MISSLE 
     70  0000 ????						; Original author: Andy Garber
     71  0000 ????						; Draws a missle based on a byte containing it's Y axis.
     72  0000 ????				      MAC	draw_missle
     73  0000 ????			   .YPOS      SET	{1}
     74  0000 ????			   .MISSLE_REG SET	{2}
     75  0000 ????				      lda	.YPOS
     76  0000 ????				      SBC	LineIdx	; TODO --- this is going to have be be at EVERY location.....
     77  0000 ????				      BNE	.skip
     78  0000 ????				      lda	#%0000010
     79  0000 ????				      jmp	.end
     80  0000 ????			   .skip
     81  0000 ????				      lda	#%0000000
     82  0000 ????			   .end
     83  0000 ????				      sta	.MISSLE_REG
     84  0000 ????				      ENDM
     85  0000 ????						;--------
     86  0000 ????						; DRAW_PLAYER duration
     87  0000 ????						; Original author: Andy Garber
     88  0000 ????						; Draws a player based on the lineIdx var
     89  0000 ????				      MAC	draw_player
     90  0000 ????			   .YPOS      SET	{1}
     91  0000 ????			   .HEIGHT    SET	{2}
     92  0000 ????			   .PLAYER_REG SET	{3}
     93  0000 ????			   .PLAYER_PTR SET	{4}
     94  0000 ????			   .PLAYER_IDX SET	{5}
     95  0000 ????				      ldy	.PLAYER_IDX
     96  0000 ????				      lda	.YPOS
     97  0000 ????				      SBC	LineIdx
     98  0000 ????				      BPL	.skip
     99  0000 ????				      CMP	#.HEIGHT
    100  0000 ????				      BMI	.skip
    101  0000 ????				      lda	(.PLAYER_PTR),y
    102  0000 ????				      inc	.PLAYER_IDX
    103  0000 ????				      jmp	.end
    104  0000 ????			   .skip
    105  0000 ????				      lda	#%0000000
    106  0000 ????			   .end
    107  0000 ????				      sta	.PLAYER_REG
    108  0000 ????				      ENDM
    109  0000 ????						;--------
    110  0000 ????						; MOVE_PLAYER duration
    111  0000 ????						; Original author: Andy Garber
    112  0000 ????						; Moves the player
    113  0000 ????				      MAC	move_player
    114  0000 ????			   .PLAYEROFFSET SET	{1}
    115  0000 ????			   .LEFT_BOUNDRY SET	{2}
    116  0000 ????			   .RIGHT_BOUNDRY SET	{3}
    117  0000 ????			   .STARTING_JOYSTICK SET	{4}
    118  0000 ????				      ldx	$01
    119  0000 ????				      lda	#.RIGHT_BOUNDRY
    120  0000 ????				      sta	horizontalBoundries
    121  0000 ????				      lda	#.LEFT_BOUNDRY
    122  0000 ????				      sta	horizontalBoundries,x
    123  0000 ????				      lda	#.STARTING_JOYSTICK
    124  0000 ????				      ldy	#.PLAYEROFFSET
    125  0000 ????				      jsr	MoveJoystick
    126  0000 ????				      ENDM
    127  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    128  0000 ????
    129  0000 ????						; Variables segment
    130 U00a3 ????				      seg.u	Variables
    131 U0080					      org	$80
    132 U0080
    133 U0080		       00	   DrawCycle  .byte.b		;-- what cycle of our draws we are on
    134 U0081							; 1: Draw playfield
    135 U0081							; 2: Draw Players
    136 U0081		       00	   DrawPlayer .byte.b		;-- what cycle of our draws we are on
    137 U0082							; 1: Draw playfield
    138 U0082							; 2: Draw Players
    139 U0082
    140 U0082		       00	   LineIdx    .byte.b
    141 U0083
    142 U0083		       00	   loopIntI   .byte.b
    143 U0084		       00	   loopIntJ   .byte.b
    144 U0085		       00	   loopIntK   .byte.b
    145 U0086
    146 U0086		       00 00 00 00*p0_TileBooleans .DS	6
    147 U008c		       00 00 00 00*p1_TileBooleans .DS	6
    148 U0092		       00 00	   horizontalBoundries .DS	2
    149 U0094
    150 U0094		       00	   P0XPos     .byte.b		;-- X coordinates
    151 U0095		       00	   P1XPos     .byte.b
    152 U0096
    153 U0096		       00	   P0YPos     .byte.b		;-- Y coordinate (offset from the start of the playfield)
    154 U0097		       00	   P1YPos     .byte.b
    155 U0098
    156 U0098		       00	   P0MssleYPos .byte.b
    157 U0099
    158 U0099		       00	   P0Idx      .byte.b		;-- data index of our sprite data
    159 U009a		       00	   P1Idx      .byte.b
    160 U009b
    161 U009b		       00	   P0CIdx     .byte.b		;-- color index of our sprite data
    162 U009c		       00	   P1CIdx     .byte.b
    163 U009d
    164 U009d		       00	   P0FrameIdx .byte.b		;--- animation frame
    165 U009e		       00	   P0FrameCounter .byte.b		;--- frame counter
    166 U009f
    167 U009f		       00 00	   P0Ptr      .DS	2
    168 U00a1		       00 00	   P1Ptr      .DS	2
    169 U00a3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    170 U00a3							; Code segment
    171  10000 ????				       seg	Code
    172  f000					      org	$f000
    173  f000
    174  f000				   Start
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
    176  f00b
    177  f00b		       a2 05		      ldx	#05
    178  f00d				   init_PF_Tiles
    179  f00d		       a9 82		      lda	#CONS_COLOR_BLUE
    180  f00f		       95 86		      sta	p0_TileBooleans,x
    181  f011		       95 8c		      sta	p1_TileBooleans,x
    182  f013		       ca		      dex
    183  f014		       10 f7		      bpl	init_PF_Tiles
    184  f016		       a9 01		      lda	#$01
    185  f018		       85 0a		      sta	CTRLPF
    186  f01a							;lda #CONS_COLOR_BLACK ; for debug
    187  f01a							;sta p0_TileBooleans+5
    188  f01a							;sta p1_TileBooleans+1
    189  f01a				   init_Players
    190  f01a		       a9 18		      lda	#CONS_BOUNDRY_P0_LEFT+1	; Max Left
    191  f01c		       85 94		      sta	P0XPos
    192  f01e		       a9 93		      lda	#CONS_BOUNDRY_P1_RIGHT-1	; Max right
    193  f020		       85 95		      sta	P1XPos
    194  f022		       a9 03		      lda	#CONS_BOUNDRY_TOP+3
    195  f024		       85 96		      sta	P0YPos
    196  f026		       85 97		      sta	P1YPos
    197  f028		       85 98		      sta	P0MssleYPos
    198  f02a
    199  f02a		       a9 00		      lda	#0
    200  f02c		       85 99		      sta	P0Idx
    201  f02e		       85 9a		      sta	P1Idx
    202  f030		       a9 03		      lda	#CONS_FRAME_ANIMATION_COUNTER
    203  f032		       85 9e		      sta	P0FrameCounter
    204  f034
    205  f034		       a9 67		      lda	#<P0_Frame_0
    206  f036		       85 9f		      sta	P0Ptr
    207  f038		       a9 f2		      lda	#>P0_Frame_0
    208  f03a		       85 a0		      sta	P0Ptr+1
    209  f03c
    210  f03c		       a9 83		      lda	#<P1_Frame_0
    211  f03e		       85 a1		      sta	P1Ptr
    212  f040		       a9 f2		      lda	#>P0_Frame_0
    213  f042		       85 a2		      sta	P1Ptr+1
    214  f044							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    215  f044							; Main
    216  f044				   NextFrame
    217  f044		       4e 82 02 	      lsr	SWCHB	; test Game Reset switch
    218  f047		       90 b7		      bcc	Start	; reset?
    219  f049							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    220  f049				   Kernal_PreScreen
    221  f049							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0  f049					      VERTICAL_SYNC		; 1 + 3 lines of VSYNC
      1  f049		       a9 0e		      lda	#%1110
      2  f04b		       85 02	   .VSLP1     sta	WSYNC
      3  f04d		       85 00		      sta	VSYNC
      4  f04f		       4a		      lsr
      5  f050		       d0 f9		      bne	.VSLP1
      0  f052					      TIMER_SETUP	37	; 37 lines of underscan
      1  f052				   .lines     SET	37
      2  f052				   .cycles    SET	((.lines * 76) - 13)
      3  f052
      4  f052
      5  f052				  -	      if	(.cycles % 64) < 12
      6  f052				  -	      lda	#(.cycles / 64) - 1
      7  f052				  -	      sta	WSYNC
      8  f052					      else
      9  f052		       a9 2b		      lda	#(.cycles / 64)
     10  f054		       85 02		      sta	WSYNC
     11  f056					      endif
     12  f056		       8d 96 02 	      sta	TIM64T
    224  f059
    225  f059							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    226  f059				   Kernal_Screen
    227  f059							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      
      0  f059					      CLEAR_PLAYFIELD
      1  f059		       a9 00		      lda	#%00000000
      2  f05b		       85 0d		      sta	PF0
      3  f05d		       85 0e		      sta	PF1
      4  f05f		       85 0f		      sta	PF2
    229  f061		       a9 4a		      lda	#CONS_COLOR_PINK
    230  f063		       85 06		      sta	COLUP0
    231  f065		       a9 ca		      lda	#CONS_COLOR_CHART
    232  f067		       85 07		      sta	COLUP1
    233  f069		       a9 00		      lda	#CONS_COLOR_BLACK
    234  f06b		       85 09		      sta	COLUBK
    235  f06d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    236  f06d							;		 Main (192 lines)
    237  f06d							; What is a Kernal?
    238  f06d							; These are groupings of line sections.
    239  f06d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    240  f06d				   Kernal_Movement
    241  f06d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    242  f06d							; This is where we do player X logic
    243  f06d							; Set Player 1 x position
    244  f06d		       a5 94		      lda	P0XPos	; get X coordinate
    245  f06f		       a2 00		      ldx	#0	; player 0
    246  f071		       20 f4 f1 	      jsr	SetHorizPos	; set coarse offset
    247  f074
    248  f074		       a5 95		      lda	P1XPos	; get X coordinate
    249  f076		       a2 01		      ldx	#1	; player 1
    250  f078		       20 f4 f1 	      jsr	SetHorizPos	; set coarse offset
    251  f07b
    252  f07b		       85 02		      sta	WSYNC	; sync w/ scanline
    253  f07d		       85 2a		      sta	HMOVE	; apply fine offsets
    254  f07f
    255  f07f		       a9 00		      lda	#0
    256  f081		       85 99		      sta	P0Idx
    257  f083		       85 9a		      sta	P1Idx
      0  f085					      TIMER_WAIT
      1  f085				   .waittimer
      2  f085		       ad 84 02 	      lda	INTIM
      3  f088		       d0 fb		      bne	.waittimer
      4  f08a		       85 02		      sta	WSYNC
    259  f08c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
    260  f08c		       85 02		      sta	WSYNC
    261  f08e				   Kernal_Tower
    262  f08e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    263  f08e							; Background art for the upper half of the game.
    264  f08e							; PF is set to Mirror and we just draw. than wait
    265  f08e							; The BLACK we see is really the PF mirroed.
    266  f08e							; Color of the towers is controlled by the background.
    267  f08e							; TODO make this less gross.
    268  f08e		       a9 00		      lda	#CONS_COLOR_BLACK
    269  f090		       85 08		      sta	COLUPF
    270  f092							; These are ALWAYS the same
    271  f092		       a9 f0		      lda	#%11110000
    272  f094		       85 0d		      sta	PF0
    273  f096		       a9 7f		      lda	#%01111111
    274  f098		       85 0f		      sta	PF2
    275  f09a
    276  f09a		       a2 00		      ldx	#$0
    277  f09c		       a0 48		      ldy	#$48
    278  f09e		       85 02		      sta	WSYNC
    279  f0a0				   Kernal_Tower_Draw
    280  f0a0		       85 02		      sta	WSYNC
    281  f0a2		       98		      tya
    282  f0a3		       c9 40		      cmp	#$40
    283  f0a5		       30 08		      bmi	Kernal_Tower_WaitASecond
    284  f0a7		       bd 43 f2 	      lda	PF_Kernal_Tower,x+1
    285  f0aa		       85 0e		      sta	PF1
    286  f0ac		       4c b3 f0 	      jmp	Kernal_Tower_Draw_Colorize
    287  f0af				   Kernal_Tower_WaitASecond
    288  f0af		       a9 f7		      lda	#%11110111
    289  f0b1		       85 0e		      sta	PF1
    290  f0b3				   Kernal_Tower_Draw_Colorize
    291  f0b3		       a9 40		      lda	#CONS_COLOR_RED
    292  f0b5		       85 09		      sta	COLUBK
      0  f0b7					      SLEEP	16	;; as we add more code for playfield, edit this.
      1  f0b7				   .CYCLES    SET	16
      2  f0b7
      3  f0b7				  -	      IF	.CYCLES < 2
      4  f0b7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0b7				  -	      ERR
      6  f0b7					      ENDIF
      7  f0b7
      8  f0b7				  -	      IF	.CYCLES & 1
      9  f0b7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0b7				  -	      nop	0
     11  f0b7				  -	      ELSE
     12  f0b7				  -	      bit	VSYNC
     13  f0b7				  -	      ENDIF
     14  f0b7				  -.CYCLES    SET	.CYCLES - 3
     15  f0b7					      ENDIF
     16  f0b7
     17  f0b7					      REPEAT	.CYCLES / 2
     18  f0b7		       ea		      nop
     17  f0b7					      REPEND
     18  f0b8		       ea		      nop
     17  f0b8					      REPEND
     18  f0b9		       ea		      nop
     17  f0b9					      REPEND
     18  f0ba		       ea		      nop
     17  f0ba					      REPEND
     18  f0bb		       ea		      nop
     17  f0bb					      REPEND
     18  f0bc		       ea		      nop
     17  f0bc					      REPEND
     18  f0bd		       ea		      nop
     17  f0bd					      REPEND
     18  f0be		       ea		      nop
     19  f0bf					      REPEND
    294  f0bf		       a9 8d		      lda	#CONS_COLOR_TEAL
    295  f0c1		       85 09		      sta	COLUBK
      0  f0c3					      SLEEP	8
      1  f0c3				   .CYCLES    SET	8
      2  f0c3
      3  f0c3				  -	      IF	.CYCLES < 2
      4  f0c3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0c3				  -	      ERR
      6  f0c3					      ENDIF
      7  f0c3
      8  f0c3				  -	      IF	.CYCLES & 1
      9  f0c3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0c3				  -	      nop	0
     11  f0c3				  -	      ELSE
     12  f0c3				  -	      bit	VSYNC
     13  f0c3				  -	      ENDIF
     14  f0c3				  -.CYCLES    SET	.CYCLES - 3
     15  f0c3					      ENDIF
     16  f0c3
     17  f0c3					      REPEAT	.CYCLES / 2
     18  f0c3		       ea		      nop
     17  f0c3					      REPEND
     18  f0c4		       ea		      nop
     17  f0c4					      REPEND
     18  f0c5		       ea		      nop
     17  f0c5					      REPEND
     18  f0c6		       ea		      nop
     19  f0c7					      REPEND
    297  f0c7		       a9 c6		      lda	#CONS_COLOR_GREEN
    298  f0c9		       85 09		      sta	COLUBK
    299  f0cb		       e8		      inx
    300  f0cc		       e8		      inx
    301  f0cd		       e8		      inx
    302  f0ce		       88		      dey
    303  f0cf		       d0 cf		      bne	Kernal_Tower_Draw
    304  f0d1				   Kernal_Tower_End
    305  f0d1							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    306  f0d1		       a9 00		      lda	#CONS_COLOR_BLACK
    307  f0d3		       85 09		      sta	COLUBK
      0  f0d5					      CLEAR_PLAYFIELD
      1  f0d5		       a9 00		      lda	#%00000000
      2  f0d7		       85 0d		      sta	PF0
      3  f0d9		       85 0e		      sta	PF1
      4  f0db		       85 0f		      sta	PF2
    309  f0dd		       a9 82		      lda	#CONS_COLOR_BLUE
    310  f0df		       85 08		      sta	COLUPF
    311  f0e1		       a2 02		      ldx	#2	; this will always do +1 what you want
    312  f0e3		       86 83		      stx	loopIntI
    313  f0e5		       a9 f0		      lda	#%11110000
    314  f0e7				   Kernal_Stairs
    315  f0e7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    316  f0e7							; This draws a nice staircase from our tower
    317  f0e7							; More background mumbo jumbo
    318  f0e7							; TODO -- allow drawing of player here?
    319  f0e7							;	   this would allow cooler view!
    320  f0e7		       a2 03		      ldx	#3	; this will always do +1 what you want
    321  f0e9		       86 84		      stx	loopIntJ
    322  f0eb				   Kernal_Stairs_J
    323  f0eb		       85 02		      sta	WSYNC
    324  f0ed		       85 0f		      sta	PF2
    325  f0ef		       c6 84		      DEC	loopIntJ
    326  f0f1		       10 f8		      BPL	Kernal_Stairs_J
    327  f0f3		       4a		      LSR
    328  f0f4		       4a		      LSR
    329  f0f5		       c6 83		      DEC	loopIntI
    330  f0f7		       10 ee		      BPL	Kernal_Stairs
    331  f0f9		       85 02		      sta	WSYNC
    332  f0fb
    333  f0fb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    334  f0fb				   Kernal_Gap
    335  f0fb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    336  f0fb							; This is just a spacing between the tiles
    337  f0fb							; we setup the presets for the complex stuff below!
    338  f0fb							; Maybe just make this part of the loop below? make my tile horizontal breaks 2 cycles each?
    339  f0fb
      0  f0fb					      CLEAR_PLAYFIELD
      1  f0fb		       a9 00		      lda	#%00000000
      2  f0fd		       85 0d		      sta	PF0
      3  f0ff		       85 0e		      sta	PF1
      4  f101		       85 0f		      sta	PF2
    341  f103		       a9 00		      lda	#CONS_COLOR_BLACK
    342  f105		       85 08		      sta	COLUPF
    343  f107
    344  f107		       a9 70		      lda	#%01110000
    345  f109		       85 0d		      sta	PF0
    346  f10b		       a9 04		      lda	#%000000100
    347  f10d		       85 0e		      sta	PF1
    348  f10f		       a9 f0		      lda	#%11110000
    349  f111		       85 0f		      sta	PF2
    350  f113
    351  f113		       a9 00		      lda	#0
    352  f115		       85 82		      sta	LineIdx
    353  f117		       a9 03		      lda	#3	; this will always do +1 what you want
    354  f119		       85 83		      sta	loopIntI
    355  f11b
    356  f11b		       a2 00		      ldx	#0	; uused to change address levels
    357  f11d		       85 02		      sta	WSYNC
    358  f11f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    359  f11f				   Kernal_CombatField
    360  f11f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    361  f11f		       a5 0f		      lda	CONS_TILE_HEIGHT
    362  f121		       85 84		      sta	loopIntJ
    363  f123				   Kernal_CombatField_startOfDraw
    364  f123		       85 02		      sta	WSYNC
    365  f125
    366  f125				   Kernal_CombatField_DrawPlayfied
    367  f125
    368  f125		       b5 86		      lda	p0_TileBooleans,x
    369  f127		       85 09		      sta	COLUBK
    370  f129
      0  f129					      SLEEP	21
      1  f129				   .CYCLES    SET	21
      2  f129
      3  f129				  -	      IF	.CYCLES < 2
      4  f129				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f129				  -	      ERR
      6  f129					      ENDIF
      7  f129
      8  f129					      IF	.CYCLES & 1
      9  f129					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f129		       04 00		      nop	0
     11  f12b				  -	      ELSE
     12  f12b				  -	      bit	VSYNC
     13  f12b					      ENDIF
     14  f12b				   .CYCLES    SET	.CYCLES - 3
     15  f12b					      ENDIF
     16  f12b
     17  f12b					      REPEAT	.CYCLES / 2
     18  f12b		       ea		      nop
     17  f12b					      REPEND
     18  f12c		       ea		      nop
     17  f12c					      REPEND
     18  f12d		       ea		      nop
     17  f12d					      REPEND
     18  f12e		       ea		      nop
     17  f12e					      REPEND
     18  f12f		       ea		      nop
     17  f12f					      REPEND
     18  f130		       ea		      nop
     17  f130					      REPEND
     18  f131		       ea		      nop
     17  f131					      REPEND
     18  f132		       ea		      nop
     17  f132					      REPEND
     18  f133		       ea		      nop
     19  f134					      REPEND
    372  f134
    373  f134		       b5 87		      lda	p0_TileBooleans,x+1
    374  f136		       85 09		      sta	COLUBK
    375  f138
      0  f138					      SLEEP	5
      1  f138				   .CYCLES    SET	5
      2  f138
      3  f138				  -	      IF	.CYCLES < 2
      4  f138				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f138				  -	      ERR
      6  f138					      ENDIF
      7  f138
      8  f138					      IF	.CYCLES & 1
      9  f138					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f138		       04 00		      nop	0
     11  f13a				  -	      ELSE
     12  f13a				  -	      bit	VSYNC
     13  f13a					      ENDIF
     14  f13a				   .CYCLES    SET	.CYCLES - 3
     15  f13a					      ENDIF
     16  f13a
     17  f13a					      REPEAT	.CYCLES / 2
     18  f13a		       ea		      nop
     19  f13b					      REPEND
    377  f13b
    378  f13b		       b5 8c		      lda	p1_TileBooleans,x
    379  f13d		       85 09		      sta	COLUBK
    380  f13f
      0  f13f					      SLEEP	10
      1  f13f				   .CYCLES    SET	10
      2  f13f
      3  f13f				  -	      IF	.CYCLES < 2
      4  f13f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f13f				  -	      ERR
      6  f13f					      ENDIF
      7  f13f
      8  f13f				  -	      IF	.CYCLES & 1
      9  f13f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f13f				  -	      nop	0
     11  f13f				  -	      ELSE
     12  f13f				  -	      bit	VSYNC
     13  f13f				  -	      ENDIF
     14  f13f				  -.CYCLES    SET	.CYCLES - 3
     15  f13f					      ENDIF
     16  f13f
     17  f13f					      REPEAT	.CYCLES / 2
     18  f13f		       ea		      nop
     17  f13f					      REPEND
     18  f140		       ea		      nop
     17  f140					      REPEND
     18  f141		       ea		      nop
     17  f141					      REPEND
     18  f142		       ea		      nop
     17  f142					      REPEND
     18  f143		       ea		      nop
     19  f144					      REPEND
    382  f144
    383  f144
    384  f144		       b5 8d		      lda	p1_TileBooleans,x+1
    385  f146		       85 09		      sta	COLUBK
    386  f148
      0  f148					      SLEEP	4
      1  f148				   .CYCLES    SET	4
      2  f148
      3  f148				  -	      IF	.CYCLES < 2
      4  f148				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f148				  -	      ERR
      6  f148					      ENDIF
      7  f148
      8  f148				  -	      IF	.CYCLES & 1
      9  f148				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f148				  -	      nop	0
     11  f148				  -	      ELSE
     12  f148				  -	      bit	VSYNC
     13  f148				  -	      ENDIF
     14  f148				  -.CYCLES    SET	.CYCLES - 3
     15  f148					      ENDIF
     16  f148
     17  f148					      REPEAT	.CYCLES / 2
     18  f148		       ea		      nop
     17  f148					      REPEND
     18  f149		       ea		      nop
     19  f14a					      REPEND
    388  f14a
    389  f14a		       a9 00		      lda	#CONS_COLOR_BLACK
    390  f14c		       85 09		      sta	COLUBK
    391  f14e
    392  f14e				   Kernal_CombatField_DrawPlayers
    393  f14e
      0  f14e					      DRAW_PLAYER	P0YPos, CONS_PLAYER_HEIGHT, GRP0, P0Ptr,P0Idx
      1  f14e				   .YPOS      SET	P0YPos
      2  f14e				   .HEIGHT    SET	CONS_PLAYER_HEIGHT
      3  f14e				   .PLAYER_REG SET	GRP0
      4  f14e				   .PLAYER_PTR SET	P0Ptr
      5  f14e				   .PLAYER_IDX SET	P0Idx
      6  f14e		       a4 99		      ldy	.PLAYER_IDX
      7  f150		       a5 96		      lda	.YPOS
      8  f152		       e5 82		      SBC	LineIdx
      9  f154		       10 0b		      BPL	.skip
     10  f156		       c9 f2		      CMP	#.HEIGHT
     11  f158		       30 07		      BMI	.skip
     12  f15a		       b1 9f		      lda	(.PLAYER_PTR),y
     13  f15c		       e6 99		      inc	.PLAYER_IDX
     14  f15e		       4c 63 f1 	      jmp	.end
     15  f161				   .skip
     16  f161		       a9 00		      lda	#%0000000
     17  f163				   .end
     18  f163		       85 1b		      sta	.PLAYER_REG
      0  f165					      DRAW_PLAYER	P1YPos, CONS_PLAYER_HEIGHT, GRP1, P1Ptr,P1Idx
      1  f165				   .YPOS      SET	P1YPos
      2  f165				   .HEIGHT    SET	CONS_PLAYER_HEIGHT
      3  f165				   .PLAYER_REG SET	GRP1
      4  f165				   .PLAYER_PTR SET	P1Ptr
      5  f165				   .PLAYER_IDX SET	P1Idx
      6  f165		       a4 9a		      ldy	.PLAYER_IDX
      7  f167		       a5 97		      lda	.YPOS
      8  f169		       e5 82		      SBC	LineIdx
      9  f16b		       10 0b		      BPL	.skip
     10  f16d		       c9 f2		      CMP	#.HEIGHT
     11  f16f		       30 07		      BMI	.skip
     12  f171		       b1 a1		      lda	(.PLAYER_PTR),y
     13  f173		       e6 9a		      inc	.PLAYER_IDX
     14  f175		       4c 7a f1 	      jmp	.end
     15  f178				   .skip
     16  f178		       a9 00		      lda	#%0000000
     17  f17a				   .end
     18  f17a		       85 1c		      sta	.PLAYER_REG
      0  f17c					      DRAW_MISSLE	P0MssleYPos, ENAM0
      1  f17c				   .YPOS      SET	P0MssleYPos
      2  f17c				   .MISSLE_REG SET	ENAM0
      3  f17c		       a5 98		      lda	.YPOS
      4  f17e		       e5 82		      SBC	LineIdx
      5  f180		       d0 05		      BNE	.skip
      6  f182		       a9 02		      lda	#%0000010
      7  f184		       4c 89 f1 	      jmp	.end
      8  f187				   .skip
      9  f187		       a9 00		      lda	#%0000000
     10  f189				   .end
     11  f189		       85 1d		      sta	.MISSLE_REG
    397  f18b
    398  f18b				   Kernal_CombatField_EndOfDraw
    399  f18b		       e6 82		      inc	LineIdx
    400  f18d		       c6 84		      dec	loopIntJ
    401  f18f		       d0 92		      bne	Kernal_CombatField_startOfDraw
    402  f191
    403  f191		       85 02		      sta	WSYNC
    404  f193		       e8		      inx
    405  f194		       e8		      inx
    406  f195		       c6 83		      dec	loopIntI
    407  f197		       d0 86		      bne	Kernal_CombatField
    408  f199
      0  f199					      MOVE_PLAYER	$0,CONS_BOUNDRY_P0_LEFT,CONS_BOUNDRY_P0_RIGHT,CONS_P0_STARTING_JOYSTICK_BYTE
      1  f199				   .PLAYEROFFSET SET	$0
      2  f199				   .LEFT_BOUNDRY SET	CONS_BOUNDRY_P0_LEFT
      3  f199				   .RIGHT_BOUNDRY SET	CONS_BOUNDRY_P0_RIGHT
      4  f199				   .STARTING_JOYSTICK SET	CONS_P0_STARTING_JOYSTICK_BYTE
      5  f199		       a6 01		      ldx	$01
      6  f19b		       a9 40		      lda	#.RIGHT_BOUNDRY
      7  f19d		       85 92		      sta	horizontalBoundries
      8  f19f		       a9 17		      lda	#.LEFT_BOUNDRY
      9  f1a1		       95 92		      sta	horizontalBoundries,x
     10  f1a3		       a9 80		      lda	#.STARTING_JOYSTICK
     11  f1a5		       a0 00		      ldy	#.PLAYEROFFSET
     12  f1a7		       20 06 f2 	      jsr	MoveJoystick
      0  f1aa					      MOVE_PLAYER	$1,CONS_BOUNDRY_P1_LEFT,CONS_BOUNDRY_P1_RIGHT,CONS_P1_STARTING_JOYSTICK_BYTE
      1  f1aa				   .PLAYEROFFSET SET	$1
      2  f1aa				   .LEFT_BOUNDRY SET	CONS_BOUNDRY_P1_LEFT
      3  f1aa				   .RIGHT_BOUNDRY SET	CONS_BOUNDRY_P1_RIGHT
      4  f1aa				   .STARTING_JOYSTICK SET	CONS_P1_STARTING_JOYSTICK_BYTE
      5  f1aa		       a6 01		      ldx	$01
      6  f1ac		       a9 94		      lda	#.RIGHT_BOUNDRY
      7  f1ae		       85 92		      sta	horizontalBoundries
      8  f1b0		       a9 6c		      lda	#.LEFT_BOUNDRY
      9  f1b2		       95 92		      sta	horizontalBoundries,x
     10  f1b4		       a9 08		      lda	#.STARTING_JOYSTICK
     11  f1b6		       a0 01		      ldy	#.PLAYEROFFSET
     12  f1b8		       20 06 f2 	      jsr	MoveJoystick
    411  f1bb							; TODO -- this should be a subroutine, and ought to be better handled!
    412  f1bb				   ChangeSprites
    413  f1bb		       a5 9e		      lda	P0FrameCounter
    414  f1bd		       c9 00		      cmp	#0
    415  f1bf		       10 21		      bpl	EndOfSprites
    416  f1c1							;TODO -- can probaby handle this faster!
      0  f1c1					      FLIP_BOOL	P0FrameIdx
      1  f1c1				   .MEMADDR   SET	P0FrameIdx
      2  f1c1		       a5 9d		      lda	.MEMADDR
      3  f1c3		       49 01		      EOR	#$01
      4  f1c5		       85 9d		      sta	.MEMADDR
    418  f1c7		       c9 01		      cmp	#$01
    419  f1c9		       f0 0b		      beq	DrawFrameB
    420  f1cb				   DrawFrameA
    421  f1cb		       a9 67		      lda	#<P0_Frame_0
    422  f1cd		       85 9f		      sta	P0Ptr
    423  f1cf		       a9 f2		      lda	#>P0_Frame_0
    424  f1d1		       85 a0		      sta	P0Ptr+1
    425  f1d3		       4c de f1 	      jmp	ResetFrameTimer
    426  f1d6				   DrawFrameB
    427  f1d6		       a9 75		      lda	#<P0_Frame_1
    428  f1d8		       85 9f		      sta	P0Ptr
    429  f1da		       a9 f2		      lda	#>P0_Frame_1
    430  f1dc		       85 a0		      sta	P0Ptr+1
    431  f1de				   ResetFrameTimer
    432  f1de		       a9 03		      lda	#CONS_FRAME_ANIMATION_COUNTER
    433  f1e0		       85 9e		      sta	P0FrameCounter
    434  f1e2				   EndOfSprites
    435  f1e2		       ea		      nop		;DEBUG! til i fill this out
    436  f1e3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    437  f1e3							; 29 lines of overscan
    438  f1e3				   Overscan
    439  f1e3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0  f1e3					      TIMER_SETUP	29
      1  f1e3				   .lines     SET	29
      2  f1e3				   .cycles    SET	((.lines * 76) - 13)
      3  f1e3
      4  f1e3
      5  f1e3				  -	      if	(.cycles % 64) < 12
      6  f1e3				  -	      lda	#(.cycles / 64) - 1
      7  f1e3				  -	      sta	WSYNC
      8  f1e3					      else
      9  f1e3		       a9 22		      lda	#(.cycles / 64)
     10  f1e5		       85 02		      sta	WSYNC
     11  f1e7					      endif
     12  f1e7		       8d 96 02 	      sta	TIM64T
      0  f1ea					      TIMER_WAIT
      1  f1ea				   .waittimer
      2  f1ea		       ad 84 02 	      lda	INTIM
      3  f1ed		       d0 fb		      bne	.waittimer
      4  f1ef		       85 02		      sta	WSYNC
    442  f1f1							; total = 262 lines, go to next frame
    443  f1f1		       4c 44 f0 	      jmp	NextFrame
    444  f1f4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    445  f1f4							; Subroutines
    446  f1f4							;;;;;;;;;;;;;;;;;;;;;
    447  f1f4							; SetHorizPos routine
    448  f1f4							; A = X coordinate
    449  f1f4							; X = player number (0 or 1)
    450  f1f4				   SetHorizPos
    451  f1f4		       85 02		      sta	WSYNC	; start a new line
    452  f1f6		       38		      sec		; set carry flag
    453  f1f7				   DivideLoop
    454  f1f7		       e9 0f		      sbc	#15	; subtract 15
    455  f1f9		       b0 fc		      bcs	DivideLoop	; branch until negative
    456  f1fb		       49 07		      eor	#7	; calculate fine offset
    457  f1fd		       0a		      asl
    458  f1fe		       0a		      asl
    459  f1ff		       0a		      asl
    460  f200		       0a		      asl
    461  f201		       95 10		      sta	RESP0,x	; fix coarse position
    462  f203		       95 20		      sta	HMP0,x	; set fine offset
    463  f205		       60		      rts		; return to caller
    464  f206							;;;;;;;;;;;;;;;;;;;;;
    465  f206							; #%10000000 -- P1 Right
    466  f206							; #%01000000 -- P1 left
    467  f206							; #%00100000 -- P1 down
    468  f206							; #%00010000 -- P1 up
    469  f206							; #%00001000 -- P0 Right
    470  f206							; #%00000100 -- P0 left
    471  f206							; #%00000010 -- P0 down
    472  f206							; #%00000001 -- P0 up
    473  f206							; Y gives us our offsets
    474  f206							; A is our initial starting controller
    475  f206				   MoveJoystick
    476  f206							; ----- Start Horizontal
    477  f206		       b6 94		      ldx	P0XPos,y
    478  f208		       2c 80 02 	      bit	SWCHA
    479  f20b		       d0 07		      bne	SkipMoveRight
    480  f20d		       e4 92		      cpx	horizontalBoundries
    481  f20f		       b0 03		      bcs	SkipMoveRight
    482  f211		       e8		      inx
    483  f212		       c6 9e		      dec	P0FrameCounter
    484  f214				   SkipMoveRight
    485  f214		       4a		      LSR		;---- read LEFT
    486  f215		       2c 80 02 	      bit	SWCHA
    487  f218		       d0 07		      bne	SkipMoveLeft
    488  f21a		       e4 93		      cpx	horizontalBoundries+1
    489  f21c		       90 03		      bcc	SkipMoveLeft
    490  f21e		       ca		      dex
    491  f21f		       c6 9e		      dec	P0FrameCounter
    492  f221				   SkipMoveLeft
    493  f221		       96 94		      stx	P0XPos,y
    494  f223							; ----- Now Vertical
    495  f223		       b6 96		      ldx	P0YPos,y
    496  f225		       4a		      LSR		;--- read Down
    497  f226		       2c 80 02 	      bit	SWCHA
    498  f229		       d0 07		      bne	SkipMoveDown
    499  f22b		       e0 1d		      cpx	#CONS_BOUNDRY_BOTTOM
    500  f22d		       f0 03		      beq	SkipMoveDown
    501  f22f		       e8		      inx
    502  f230		       c6 9e		      dec	P0FrameCounter
    503  f232				   SkipMoveDown
    504  f232		       4a		      LSR		;--- read UP
    505  f233		       2c 80 02 	      bit	SWCHA
    506  f236		       d0 07		      bne	SkipMoveUp
    507  f238		       e0 00		      cpx	#CONS_BOUNDRY_TOP
    508  f23a		       f0 03		      beq	SkipMoveUp
    509  f23c		       ca		      dex
    510  f23d		       c6 9e		      dec	P0FrameCounter
    511  f23f				   SkipMoveUp
    512  f23f		       96 96		      stx	P0YPos,y
    513  f241		       60		      rts
    514  f242							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    515  f242							; Data
    516  f242							;;;;;;;;;;;;;;;;;;;;;
    517  f242				   PF_Kernal_Tower
    518  f242		       f0		      .byte.b	#%11110000
    519  f243		       f7		      .byte.b	#%11110111
    520  f244		       7f		      .byte.b	#%01111111
    521  f245
    522  f245		       f0		      .byte.b	#%11110000
    523  f246		       f7		      .byte.b	#%11110111
    524  f247		       7f		      .byte.b	#%01111111
    525  f248
    526  f248		       f0		      .byte.b	#%11110000
    527  f249		       f7		      .byte.b	#%11110111
    528  f24a		       7f		      .byte.b	#%01111111
    529  f24b							;----------------------------
    530  f24b		       f0		      .byte.b	#%11110000
    531  f24c		       e3		      .byte.b	#%11100011
    532  f24d		       7f		      .byte.b	#%01111111
    533  f24e
    534  f24e		       f0		      .byte.b	#%11110000
    535  f24f		       e3		      .byte.b	#%11100011
    536  f250		       7f		      .byte.b	#%01111111
    537  f251
    538  f251		       f0		      .byte.b	#%11110000
    539  f252		       e3		      .byte.b	#%11100011
    540  f253		       7f		      .byte.b	#%01111111
    541  f254							;----------------------------
    542  f254		       f0		      .byte.b	#%11110000
    543  f255		       c1		      .byte.b	#%11000001
    544  f256		       7f		      .byte.b	#%01111111
    545  f257
    546  f257		       f0		      .byte.b	#%11110000
    547  f258		       c1		      .byte.b	#%11000001
    548  f259		       7f		      .byte.b	#%01111111
    549  f25a
    550  f25a		       f0		      .byte.b	#%11110000
    551  f25b		       c1		      .byte.b	#%11000001
    552  f25c		       7f		      .byte.b	#%01111111
    553  f25d							;----------------------------
    554  f25d		       f0		      .byte.b	#%11110000
    555  f25e		       80		      .byte.b	#%10000000
    556  f25f		       7f		      .byte.b	#%01111111
    557  f260
    558  f260		       f0		      .byte.b	#%11110000
    559  f261		       80		      .byte.b	#%10000000
    560  f262		       7f		      .byte.b	#%01111111
    561  f263
    562  f263		       f0		      .byte.b	#%11110000
    563  f264		       80		      .byte.b	#%10000000
    564  f265		       7f		      .byte.b	#%01111111
    565  f266							;----------------------------
    566  f266		       00		      .byte.b	#0
    567  f267				   P0_Frame_0
    568  f267							; draw from top to bottom
    569  f267		       7c		      .byte.b	#%01111100
    570  f268		       7e		      .byte.b	#%01111110
    571  f269		       68		      .byte.b	#%01101000
    572  f26a		       7c		      .byte.b	#%01111100
    573  f26b		       3c		      .byte.b	#%00111100
    574  f26c		       00		      .byte.b	#%00000000
    575  f26d		       78		      .byte.b	#%01111000
    576  f26e		       bd		      .byte.b	#%10111101
    577  f26f		       be		      .byte.b	#%10111110
    578  f270		       5c		      .byte.b	#%01011100
    579  f271		       78		      .byte.b	#%01111000
    580  f272		       00		      .byte.b	#%00000000
    581  f273		       76		      .byte.b	#%01110110
    582  f274		       00		      .byte.b	#0
    583  f275				   P0_Frame_1
    584  f275							; draw from top to bottom
    585  f275		       7c		      .byte.b	#%01111100
    586  f276		       7e		      .byte.b	#%01111110
    587  f277		       68		      .byte.b	#%01101000
    588  f278		       7c		      .byte.b	#%01111100
    589  f279		       3c		      .byte.b	#%00111100
    590  f27a		       00		      .byte.b	#%00000000
    591  f27b		       78		      .byte.b	#%01111000
    592  f27c		       bd		      .byte.b	#%10111101
    593  f27d		       be		      .byte.b	#%10111110
    594  f27e		       5c		      .byte.b	#%01011100
    595  f27f		       78		      .byte.b	#%01111000
    596  f280		       00		      .byte.b	#%00000000
    597  f281		       3c		      .byte.b	#%00111100
    598  f282		       00		      .byte.b	#0
    599  f283				   P1_Frame_0
    600  f283							; draw from top to bottom
    601  f283		       3e		      .byte.b	#%00111110	; 0x3E
    602  f284		       7e		      .byte.b	#%01111110	; 0x7E
    603  f285		       16		      .byte.b	#%00010110	; 0x16
    604  f286		       3e		      .byte.b	#%00111110	; 0x3E
    605  f287		       3c		      .byte.b	#%00111100	; 0x3C
    606  f288		       00		      .byte.b	#%00000000	; 0x00
    607  f289		       1e		      .byte.b	#%00011110	; 0x1E
    608  f28a		       bd		      .byte.b	#%10111101	; 0xBD
    609  f28b		       7d		      .byte.b	#%01111101	; 0x7D
    610  f28c		       3a		      .byte.b	#%00111010	; 0x3A
    611  f28d		       1e		      .byte.b	#%00011110	; 0x1E
    612  f28e		       00		      .byte.b	#%00000000	; 0x00
    613  f28f		       6e		      .byte.b	#%01101110	; 0x6E
    614  f290		       00		      .byte.b	#0
    615  f291							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    616  f291							; Epilogue
    617  f291							;;;;;;;;;;;;;;;;;;;;;
    618  fffc					      org	$fffc
    619  fffc		       00 f0		      .word.w	Start	; reset vector
    620  fffe		       00 f0		      .word.w	Start	; BRK vector
