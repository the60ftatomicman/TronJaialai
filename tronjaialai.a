;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Header
        processor 6502
        include "vcs.h"
        include "macro.h"
        ; include "custom_macro.h" ; -- do so much work online this seems nice but necessary atm
        include "xmacro.h"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Constants
CONS_PLAYER_HEIGHT  EQU  $F0 ; FF-intended height
CONS_TILE_HEIGHT    EQU  #15
CONS_TILE_HIDE      EQU  %00000000

CONS_COLOR_BLACK EQU $00
CONS_COLOR_RED   EQU $40
CONS_COLOR_BLUE  EQU $82
CONS_COLOR_GREEN EQU $C6

CONS_TILE_P0_PF0_SHOW  EQU  %11111111
CONS_TILE_P0_PF1_SHOW  EQU  %11100111
CONS_TILE_P0_PF2_SHOW  EQU  %00001111 ; TODO -- maybe only make THIS one different?

CONS_TILE_P1_PF0_SHOW  EQU  %00001111
CONS_TILE_P1_PF1_SHOW  EQU  %00000000
CONS_TILE_P1_PF2_SHOW  EQU  %00000000
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Macros
; TODO add to includes
;--------
; FLIP_BOOL duration
; Original author: Andy Garber
; Takes a memory address and flips it's value than stores it
; Assumes the Memory address value is 1 or 0
;usage: FLIP_BOOL SomeAddress
        MAC FLIP_BOOL
.MEMADDR     SET {1}
        lda .MEMADDR
        EOR #$01
        sta .MEMADDR
        ENDM
;--------
; CLEAR_PLAYFIELD duration
; Original author: Andy Garber
; sets playfield to 0 across the board
        MAC CLEAR_PLAYFIELD
        lda #%00000000
        sta PF0
        sta PF1
        sta PF2
        ENDM
        
;--------
; FILL_PLAYFIELD duration
; Original author: Andy Garber
; sets playfield to 1 across the board
        MAC FILL_PLAYFIELD
        lda #%11111111
        sta PF0
        sta PF1
        sta PF2
        ENDM
        
;--------
; DRAW_PLAYER duration
; Original author: Andy Garber
; Draws a player based on the lineIdx var
        MAC DRAW_PLAYER
.YPOS        SET {1}
.HEIGHT      SET {2}
.PLAYER_REG  SET {3}

        lda .YPOS
        SBC LineIdx
        BPL .skip
        CMP #.HEIGHT
        BMI .skip
        lda #%11111111
        jmp .end
.skip
        lda #%0000000
.end   
        sta .PLAYER_REG
        ENDM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Variables segment
        seg.u Variables
        org $80

DrawCycle       .byte ;-- what cycle of our draws we are on
                      ; 1: Draw playfield
                      ; 2: Draw Players
DrawPlayer      .byte ;-- what cycle of our draws we are on
                      ; 1: Draw playfield
                      ; 2: Draw Players
ReadJoystick    .byte

LineIdx         .byte

loopIntI        .byte
loopIntJ        .byte
loopIntK        .byte

;TODO -- reoganize this!
p0_T1           .byte
p0_T2           .byte
p1_T1           .byte
p1_T2           .byte

p0_T3           .byte
p0_T4           .byte
p1_T3           .byte
p1_T4           .byte

p0_T5           .byte
p0_T6           .byte
p1_T5           .byte
p1_T6           .byte

P0XPos          .byte ;-- X coordinates
P1XPos          .byte

P0YPos          .byte ;-- Y coordinate (offset from the start of the playfield)
P1YPos          .byte

P0Idx           .byte ;-- data index of our sprite data
P1Idx           .byte


P0CIdx          .byte ;-- color index of our sprite data
P1CIdx          .byte

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Code segment
        seg Code
        org $f000

Start
        CLEAN_START
        lda #5
        sta P0XPos
        lda #160
        sta P1XPos
        lda #1
        sta P0YPos
        sta P1YPos
        ; TODO -- lessen or make a loop ya doofus
        lda #CONS_COLOR_BLUE
        sta p0_T1
	sta p0_T2
	sta p1_T1
	sta p1_T2

        sta p0_T3
	sta p0_T4
	sta p1_T3
	sta p1_T4
        
        sta p0_T5
	sta p0_T6
	sta p1_T5
	sta p1_T6
        
        lda #CONS_COLOR_BLACK ; for debug
        sta p0_T5
        sta p0_T6
        
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Main
NextFrame
        lsr SWCHB ; test Game Reset switch
        bcc Start ; reset?
        lda #$01
        sta CTRLPF
        
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Kernal_PreScreen
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        VERTICAL_SYNC  ; 1 + 3 lines of VSYNC
        TIMER_SETUP 37 ; 37 lines of underscan

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Kernal_Screen
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      
        CLEAR_PLAYFIELD
        lda #$FF
        sta COLUP0
        lda #$07

        sta COLUP1
        lda #$00
        sta COLUBK
        lda #255
        sta LineIdx
        TIMER_WAIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;               Main (192 lines)
; What is a Kernal?
; These are groupings of line sections.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
Kernal_Movement
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
; This is where we do player X logic
; Set Player 1 x position
        lda P0XPos      ; get X coordinate
        ldx #0          ; player 0
        jsr SetHorizPos ; set coarse offset
        sta WSYNC       ; sync w/ scanline
        sta HMOVE       ; apply fine offsets

        lda P1XPos      ; get X coordinate
        ldx #1          ; player 1
        jsr SetHorizPos ; set coarse offset
        sta WSYNC       ; sync w/ scanline
        sta HMOVE       ; apply fine offsets
        
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;         
        sta WSYNC
Kernal_Tower
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
; Background art for the upper half of the game.
; PF is set to Mirror and we just draw. than wait
; The BLACK we see is really the PF mirroed.
; Color of the towers is controlled by the background.
        lda #CONS_COLOR_BLACK ; Make this a define
        sta COLUPF
       
        ldx #%11110000
        stx PF0
        ldx #%11110111
        stx PF1
        ldx #%01111111
       	stx PF2
        
        ldy #70
Kernal_Tower_Draw
        sta WSYNC
        lda #CONS_COLOR_RED
        sta COLUBK
        SLEEP 30
        lda #CONS_COLOR_BLUE
        sta COLUBK      
        SLEEP 10 
        lda #CONS_COLOR_GREEN
        sta COLUBK
        dey
        bne Kernal_Tower_Draw
Kernal_Tower_End
        lda #CONS_COLOR_BLACK
        sta COLUBK
	CLEAR_PLAYFIELD
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
        lda #CONS_COLOR_BLUE ; Make this a define
        sta COLUPF
        ldx #2 ; this will always do +1 what you want
        stx loopIntI
        lda #%11110000
Kernal_Stairs
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; This draws a nice staircase from our tower
; More background mumbo jumbo
; TODO -- allow drawing of player here
        ldx #3 ; this will always do +1 what you want
        stx loopIntJ
Kernal_Stairs_J
        sta WSYNC
        sta PF2
        DEC loopIntJ
        BPL Kernal_Stairs_J
        LSR
        LSR
        DEC loopIntI
        BPL Kernal_Stairs
        sta WSYNC

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Kernal_Gap
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; This is just a spacing between the tiles
; we setup the presets for the complex stuff below!
; Maybe just make this part of the loop below? make my tile horizontal breaks 2 cycles each?

        CLEAR_PLAYFIELD
        sta WSYNC
        lda #CONS_COLOR_BLACK ; May NEVER need to do this, there may be an inverse for the stairs above.
        sta COLUPF
        lda #CONS_COLOR_BLUE
        sta COLUBK  
        lda #0
        sta LineIdx
        lda #3 ; this will always do +1 what you want
        sta loopIntI
        ldy 0 ; uused to change address levels
        sta WSYNC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Kernal_CombatField
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Draws the lower playfield and players.
; very complex atm.
; Going to TRY to make it so we draw
	lda #%00010000
        sta PF0
        lda #%00001100
        sta PF1
        lda #%11100000
        sta PF2
        lda CONS_TILE_HEIGHT
        
        sta loopIntJ
Kernal_CombatField_startOfDraw
        sta WSYNC
	
Kernal_CombatField_DrawPlayfied
        lda p0_T1,y
        sta COLUBK 
        
        SLEEP 20
        
        lda p0_T2,y
        sta COLUBK
        
        SLEEP 7 ; minimal. mid is red atm.
        
	lda p1_T1,y
	sta COLUBK
        
        SLEEP 10
        
        lda p1_T2,y
        sta COLUBK

	SLEEP 5

        lda #CONS_COLOR_BLACK
	sta COLUBK
        
        jmp Kernal_CombatField_EndOfDraw
Kernal_CombatField_DrawPlayers
Kernal_CombatField_EndOfDraw

	DRAW_PLAYER P0YPos, CONS_PLAYER_HEIGHT, GRP0
	DRAW_PLAYER P1YPos, CONS_PLAYER_HEIGHT, GRP1

        inc LineIdx
        dec loopIntJ
        bne Kernal_CombatField_startOfDraw
        
        lda #CONS_COLOR_BLACK
        sta COLUBK
        sta WSYNC
        
        iny
        iny
        iny
        iny
        dec loopIntI
        bne Kernal_CombatField
        
	jsr MoveJoystick
        nop ;DEBUG! til i fill this out
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 29 lines of overscan
Overscan
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        TIMER_SETUP 29
        TIMER_WAIT
        nop ; for debugging!
        ; total = 262 lines, go to next frame
        jmp NextFrame
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Subroutines
;;;;;;;;;;;;;;;;;;;;;
; SetHorizPos routine
; A = X coordinate
; X = player number (0 or 1)
SetHorizPos
        sta WSYNC        ; start a new line
        sec               ; set carry flag
DivideLoop
        sbc #15          ; subtract 15
        bcs DivideLoop   ; branch until negative
        eor #7           ; calculate fine offset
        asl
        asl
        asl
        asl
        sta RESP0,x      ; fix coarse position
        sta HMP0,x       ; set fine offset
        rts              ; return to caller
;;;;;;;;;;;;;;;;;;;;;
MoveJoystick
; Move vertically
; (up and down are actually reversed since ypos starts at bottom)
	ldx P0YPos
	lda #%00100000	;Up?
	bit SWCHA
	bne SkipMoveUp
        cpx #2
        bcc SkipMoveUp
        dex
        ;dex
SkipMoveUp
	lda #%00010000	;Down?
	bit SWCHA 
	bne SkipMoveDown
        cpx #183
        bcs SkipMoveDown
        inx
        ;inx
SkipMoveDown
	stx P0YPos
; Move horizontally
        ldx P0XPos
	lda #%01000000	;Left?
	bit SWCHA
	bne SkipMoveLeft
        cpx #16
        bcc SkipMoveLeft
        dex
SkipMoveLeft
	lda #%10000000	;Right?
	bit SWCHA 
	bne SkipMoveRight
        cpx #153
        bcs SkipMoveRight
        inx
SkipMoveRight
	stx P0XPos
	rts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Epilogue
;;;;;;;;;;;;;;;;;;;;;
        org $fffc
        .word Start ; reset vector
        .word Start ; BRK vector